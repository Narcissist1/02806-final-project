{
  
    
        "post0": {
            "title": "Title",
            "content": "02806 Final project-Test . toc: true | badges: true | author: Georgios Zefkilis &amp; Yucheng Ren | comments: false | categories: [data_analysis, visualization] | . #collapse-hide # cov19 preprocess cov19 = cov19[[&#39;Date&#39;, &#39;Country&#39;, &#39;Confirmed&#39;, &#39;Deaths&#39;, &#39;Recovered&#39;]] cov19[&#39;Country&#39;] = cov19[&#39;Country&#39;].replace(&#39;Mainland China&#39;, &#39;China&#39;) cov19.columns = [&#39;Date&#39;, &#39;Country&#39;, &#39;Cases&#39;, &#39;Deaths&#39;, &#39;Recovered&#39;] cov19 = cov19.groupby([&#39;Date&#39;, &#39;Country&#39;])[[&#39;Cases&#39;, &#39;Deaths&#39;, &#39;Recovered&#39;]] cov19 = cov19.sum().reset_index() # ebola preprocess ebola = ebola[[&#39;Date&#39;, &#39;Country&#39;, &#39;No. of confirmed, probable and suspected cases&#39;, &#39;No. of confirmed, probable and suspected deaths&#39;]] ebola.columns = [&#39;Date&#39;, &#39;Country&#39;, &#39;Cases&#39;, &#39;Deaths&#39;] ebola = ebola.groupby([&#39;Date&#39;, &#39;Country&#39;])[[&#39;Cases&#39;, &#39;Deaths&#39;]] ebola = ebola.sum().reset_index() ebola[&#39;Cases&#39;] = ebola[&#39;Cases&#39;].fillna(0) ebola[&#39;Deaths&#39;] = ebola[&#39;Deaths&#39;].fillna(0) ebola[&#39;Cases&#39;] = ebola[&#39;Cases&#39;].astype(&#39;int&#39;) ebola[&#39;Deaths&#39;] = ebola[&#39;Deaths&#39;].astype(&#39;int&#39;) # h1n1 preprocess h1n1 = h1n1[[&#39;Update Time&#39;, &#39;Country&#39;, &#39;Cases&#39;, &#39;Deaths&#39;]] h1n1.columns = [&#39;Date&#39;, &#39;Country&#39;, &#39;Cases&#39;, &#39;Deaths&#39;] h1n1 = h1n1.groupby([&#39;Date&#39;, &#39;Country&#39;])[[&#39;Cases&#39;, &#39;Deaths&#39;]] h1n1 = h1n1.sum().reset_index() # sars preprocess sars = sars[[&#39;Date&#39;, &#39;Country&#39;, &#39;Cumulative number of case(s)&#39;, &#39;Number of deaths&#39;, &#39;Number recovered&#39;]] sars.columns = [&#39;Date&#39;, &#39;Country&#39;, &#39;Cases&#39;, &#39;Deaths&#39;, &#39;Recovered&#39;] sars = sars.groupby([&#39;Date&#39;, &#39;Country&#39;])[[&#39;Cases&#39;, &#39;Deaths&#39;, &#39;Recovered&#39;]] sars = sars.sum().reset_index() . . Basic Data Analysis&#182; . # collapse-hide def averagePerDay(disease, attr=&#39;Cases&#39;): allCases = disease[attr].max() days = len(disease.Date.unique()) return allCases * 1.0 / days def getTimeSpan(disease): return (disease.Date.min(), disease.Date.max(), len(disease.Date.unique())) print(&quot;Time span for our data:&quot;) for key, value in dataset.items(): start, end, span = getTimeSpan(value) print(key, &#39;starts from &#39;, start, &#39; ends at &#39;, end, &#39; duration &#39;, span, &#39;days&#39;) print() print(&quot;Average confirmed cases per day for each disease&quot;) for key, value in dataset.items(): cases = averagePerDay(value) print(key, &#39;average confirmed&#39;, cases) print() print(&quot;Average death cases per day for each disease&quot;) for key, value in dataset.items(): cases = averagePerDay(value, &#39;Deaths&#39;) print(key, &#39;average death&#39;, cases) . . Comparison with Other Infectious Virus .",
            "url": "https://narcissist1.github.io/02806-final-project/2020/04/20/test2-project.html",
            "relUrl": "/2020/04/20/test2-project.html",
            "date": " • Apr 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "02806 Final project",
            "content": ". Tip: This page is generated from a Jupyter notebook, some of the code are hid under the hood, some of them can be shown by clicking the button Show Code. If you want to visit the complete notebook, please click the view on github button above. . Introduction . should the scope would be to show the impact in global economy or how has affected Denmark in comparison with major countries how we define major? . Undoubtedly the recent appearrance and expansion of COVID-19 virus has affected the lives of billions of people worldwide is many aspects. Goverments have been under constant challenge to reduce social interaction in order to mitigate the possibilities of virus transmission. Therefore, they have introduced hard measurements to face this severe situation which have significant impact to every body&#39;s live. . Economy was the first area that affected from those measurements. The work culture had to change to meet the derivative of the goverments, which led companies to move faster towards digitilisation. As a result companies that weren&#39;t eager in such changes to face important financial issues forcing them in many cases to reduce their human resources. For other companies such travelling agencies or copmanies in hospitalitty sector, the hit was even harder since they rely their profits entirely on the people&#39;s need for entertainment, social exploration etc.. Therefore, they have completely or partially shut down their operation leading many people in unemployment. . The above constitutes common observations and may look discouranging and demotivating facts for many people. However, we can not conclude how big this impact is in each country&#39;s overall economy without an in depth investigation of actual facts. . Upon that, we came to the desicion to analyse data from microeconomic and macroeconomic point of view in order to get a more clear understanding of how the virus has affected our economy. . To sum up, from this study we aim to provide a clear conclusion about the economic consequences due to COVID-19 which will be based on analysis of reliable sources. Through interactive and annotated graphs we want to give to the intendent audience all the information needed in order to understand the impact of COVID-19 in economy in a simple and concine manner. . Data Analysis . In the study we will analyse data from all the countries directly affected from COVID-19 giving more focus though in Denmark. We will start the study by presenting a statistical analysis of how the situation with regards to COVID-19 looks like in the most major countries. Then we will include financial data to explore whether there is a significant impact of the virus in our economy and which countries specifically have affected the most. In order to carry out the analysis we will use data from IMF, OECD and other sources which can be found at the end of the page. The reason we chose those datasets was that we believe they contain all the information needed to obtain the required outcome about the fincanial impact of COVID-19. . COVID-19 analysis . In this section, we will dive more into COVID-19 data to present the current situation of virus by illustrating the the numbers of confirmed and death cases across major countries. Then with help of interactive represenation of those numbers we will try to understand the spread rate and distribution of COVID-19. . Data preparation . In the following table is shown a sample of the data regarding COVID-19. The dataset contains columns with the countries, confirmed and recovered cases as well as overall deaths per country. . Date Country Confirmed Recovered Deaths . 18310 2020-04-29 | West Bank and Gaza | 344 | 71 | 2 | . 18311 2020-04-29 | Western Sahara | 6 | 5 | 0 | . 18312 2020-04-29 | Yemen | 6 | 1 | 0 | . 18313 2020-04-29 | Zambia | 97 | 54 | 3 | . 18314 2020-04-29 | Zimbabwe | 32 | 5 | 4 | . In order to extract more information as possible from the dataset it is necessary to combine several datasets. By doing so, we include columns referring to daily new cases, new deaths and new recovered cases. Other, than that an investigation for missing values and treatment of those it is also a requirement to bring the dataset in form ready for analysis. In the present study the missing values were filled with zeros. It considered the best way to treat such a values because if for example the missing values were filled with the mean, mode or median could lead to false interpration of the results. maybe present some stats first . In the following table it is shown the final dataset about COVID-19 looks after the preprossesing. . # collapse-show # data processing to create Active, New cases, New deaths, New recovered full_clean_data[&#39;Active&#39;] = full_clean_data[&#39;Confirmed&#39;] - full_clean_data[&#39;Recovered&#39;] - full_clean_data[&#39;Deaths&#39;] countries = [&#39;US&#39;, &#39;Italy&#39;, &#39;China&#39;, &#39;Spain&#39;, &#39;France&#39;, &#39;Iran&#39;, &#39;United Kingdom&#39;, &#39;Denmark&#39;] selected_data = full_clean_data[full_clean_data[&#39;Country&#39;].isin(countries)] for i in selected_data.index: date = selected_data.loc[i, &#39;Date&#39;] country = selected_data.loc[i, &#39;Country&#39;] date = datetime.strptime(date, &#39;%Y-%m-%d&#39;) yesterday = datetime.strftime(date - timedelta(1), &#39;%Y-%m-%d&#39;) yesterdayData = selected_data.loc[(selected_data.Date == yesterday) &amp; (selected_data.Country == country)] if len(yesterdayData) &lt;= 0: selected_data.loc[i, &#39;New cases&#39;] = 0 selected_data.loc[i, &#39;New deaths&#39;] = 0 selected_data.loc[i, &#39;New recovered&#39;] = 0 continue yesterdayData = yesterdayData.iloc[0] selected_data.loc[i, &#39;New cases&#39;] = selected_data.loc[i, &#39;Confirmed&#39;] - yesterdayData.Confirmed selected_data.loc[i, &#39;New deaths&#39;] = selected_data.loc[i, &#39;Deaths&#39;] - yesterdayData.Deaths selected_data.loc[i, &#39;New recovered&#39;] = selected_data.loc[i, &#39;Recovered&#39;] - yesterdayData.Recovered selected_data = selected_data.fillna(value=0) selected_data[&#39;New cases&#39;] = selected_data[&#39;New cases&#39;].astype(int) selected_data[&#39;New deaths&#39;] = selected_data[&#39;New deaths&#39;].astype(int) selected_data[&#39;New recovered&#39;] = selected_data[&#39;New recovered&#39;].astype(int) . . Date Country Confirmed Recovered Deaths Active New cases New deaths New recovered . 18210 2020-04-29 | Iran | 93657 | 73791 | 5957 | 13909 | 1073 | 80 | 1352 | . 18214 2020-04-29 | Italy | 203591 | 71252 | 27682 | 104657 | 2086 | 323 | 2311 | . 18286 2020-04-29 | Spain | 236899 | 132929 | 24275 | 79695 | 4771 | 453 | 9026 | . 18301 2020-04-29 | US | 1039909 | 120720 | 60967 | 858222 | 27327 | 2612 | 4784 | . 18305 2020-04-29 | United Kingdom | 166441 | 857 | 26166 | 139418 | 4091 | 4421 | 44 | . Statistical analysis . include basic statistic tables about the data . COVID-19 presentation in Denmark . The figure below illustrates the total confirmed cases and deaths in Denmark from the day the virus appeared in the country (approximately January 22) until April 23. we can either update the date or just stop to the day the lockdown stopped . It seems that even during the lock down (10/03/2020 - 20/03/20) the number of confirmed cases and deaths showed an increasing trend. Although it has to be highlighted that the purpose of lock down was to keep these numbers as low as possible in order not to exceed the capacity of the cases that the health system can handle. maybe we can find data about that and include them to see if they get the target . # collapse-hide denmark = selected_data[selected_data[&#39;Country&#39;] == &#39;Denmark&#39;] base = alt.Chart(denmark).mark_bar().encode( x=&#39;monthdate(Date):O&#39;, ).properties( width=500 ) red = alt.value(&#39;#f54242&#39;) base.encode(y=&#39;Confirmed&#39;).properties(title=&#39;Total Confirmed&#39;) | base.encode(y=&#39;Deaths&#39;, color=red).properties(title=&#39;Total Deaths&#39;) . . Moving forward to the figures below, it is observed the number of new incidents(left pane) and deaths (right pane) in Denmark during the same period. . When the lock down implemented (around 10th of March) and until the 13th of the same month 170 new cases were recorded daily. Whereas on the 14th of March a significant drop of approximatelly 75% of the cases recorded is observed. Between, March the 24th and April the 9th the number of confirmed cases reached its peak with an average of 300 cases per day. Then the recorded cases began to drop again until today where they have reached of an average 150 cases per day(10/05/2020 - 23/05/2020). . The number of daily deaths reached its highest numbers between 3rd and 9th of April and dropped by approximatelly 50% after that. By today the number of deaths per day doesn&#39;t exceed the 9 deaths. Overall, we can see that the measurments against the virus yielded in reduction of deaths and confirmed cases after its implementation. . # collapse-hide base.encode(y=&#39;New cases&#39;).properties(title=&#39;Daily New Cases&#39;) | base.encode(y=&#39;New deaths&#39;, color=red).properties(title=&#39;Daily New Deaths&#39;) . . Death rate calculation formula: Death No. / Confirmed No. . # collapse-hide # data processing selected_data[&#39;DeathRate&#39;] = selected_data[&#39;Deaths&#39;] / selected_data[&#39;Confirmed&#39;] * 100 selected_data = selected_data.fillna(value=0) # plot highlight = alt.selection(type=&#39;single&#39;, on=&#39;mouseover&#39;, fields=[&#39;Country&#39;], nearest=True) base = alt.Chart(selected_data, title=&#39;Death Rate Among Major Countries&#39;).transform_filter( alt.datum.Country != &#39;Iran&#39; ).encode( x=&#39;Date:T&#39;, y=alt.Y(&#39;DeathRate:Q&#39;, title= &#39;Death Rate %&#39;), color=&#39;Country:N&#39;, tooltip = [alt.Tooltip(&#39;DeathRate&#39;), alt.Tooltip(&#39;Country&#39;), ], ) points = base.mark_circle().encode( opacity=alt.value(0) ).add_selection( highlight ).properties( width=600 ) lines = base.mark_line().encode( size=alt.condition(~highlight, alt.value(1), alt.value(3)) ) points + lines . . # collapse-hide # data processing start_date = datetime.strptime(&#39;2020-01-22&#39;, &#39;%Y-%m-%d&#39;) for index, row in selected_data.iterrows(): date = datetime.strptime(row[&#39;Date&#39;], &#39;%Y-%m-%d&#39;) selected_data.loc[index, &#39;Day&#39;] = (date - start_date).days selected_data[&#39;Day&#39;] = selected_data[&#39;Day&#39;].astype(int) # plot select_date = alt.selection_single( name=&#39;select&#39;, fields=[&#39;Day&#39;], init={&#39;Day&#39;: 0}, bind=alt.binding_range(min=0, max=selected_data.Day.max(), step=5) ) alt.Chart(selected_data, title=&#39;COVID-19 Spread Over Time&#39;).mark_point(filled=True).encode( alt.X(&#39;Confirmed&#39;, scale=alt.Scale(zero=False)), alt.Y(&#39;Deaths&#39;, scale=alt.Scale(zero=False)), alt.Size(&#39;Active&#39;), alt.Color(&#39;Country&#39;), alt.Order(&#39;Confirmed&#39;, sort=&#39;descending&#39;), tooltip = [alt.Tooltip(&#39;Confirmed&#39;), alt.Tooltip(&#39;Deaths&#39;), alt.Tooltip(&#39;Active&#39;) ], ).properties( width=400, height=300 ).add_selection(select_date).transform_filter(select_date) . . Overlook of COVID-19 current distribution worldwide . # collapse-hide # data preperation, combine refrence dataset to virus dataset to obtain area code for map plot refrence = refrence.rename(columns={&#39;Country_Region&#39;: &#39;Country/Region&#39;}) most_recent_data = world_data[world_data[&#39;Date&#39;] == world_data[&#39;Date&#39;].max()] most_recent_data = most_recent_data[[&#39;Date&#39;, &#39;Country/Region&#39;, &#39;Confirmed&#39;,&#39;Recovered&#39;,&#39;Deaths&#39;]] grouped = most_recent_data.groupby(&#39;Country/Region&#39;).sum() result = grouped.join(refrence.set_index(&#39;Combined_Key&#39;), on=&#39;Country/Region&#39;) result = result.fillna(value=0) result[&#39;code3&#39;] = result[&#39;code3&#39;].astype(int) # plot alt.Chart(alt.topo_feature(data.world_110m.url, &#39;countries&#39;), title=&#39;Confirmed Cases Map&#39;).mark_geoshape( stroke=&#39;#aaa&#39;, strokeWidth=0.25 ).transform_lookup( lookup=&#39;id&#39;, from_=alt.LookupData(data=result, key=&#39;code3&#39;, fields=[&#39;Confirmed&#39;]) ).encode( alt.Color(&#39;Confirmed:Q&#39;, scale=alt.Scale(domain=[0, result.Confirmed.max()/10], clamp=True), legend=alt.Legend(format=&#39;&#39;)), alt.Tooltip(&#39;Confirmed:Q&#39;) ).project( type=&#39;equirectangular&#39; ).properties( width=900, height=500 ).configure_view( stroke=None ) . . COVID-19 Spreading Among Major Countries . Below it is illustrated how the COVID-19 has been evolved among major countries and how they compared to Denmark. The term major reflects to the number of cases recorded in those countries. Those countries namely are China (where the COVID-19 crisis started) USA, France, Iran, United Kingdom, Italy and Spain. Even though the presentation of those countries takes only the number of cases into account, it is interesting that apart from Spain, Iran and Denmark the rest constitute part of the group of seven largest IMF-advanced economies of the world. . In China where the COVID-19 first appeared, shows a high increase in number of cases per day during February and in relatively short period of time archives to diminish those numbers. On . The graphs look a bit misleading, I would suggest to replace them . # collapse-hide # plot interval = alt.selection_interval() circle = alt.Chart(selected_data, title=&#39;Spread and New Cases Over Time&#39;).mark_circle().encode( x=&#39;monthdate(Date):O&#39;, y=&#39;Country&#39;, color=alt.condition(interval, &#39;Country&#39;, alt.value(&#39;lightgray&#39;)), size=alt.Size(&#39;New cases:Q&#39;, scale=alt.Scale(range=[0, 3000]), legend=alt.Legend(title=&#39;Daily new cases&#39;) ) ).properties( width=1000, height=400, selection=interval ) bars = alt.Chart(selected_data).mark_bar().encode( y=&#39;Country&#39;, color=&#39;Country&#39;, x=&#39;sum(New cases):Q&#39; ).properties( width=1000 ).transform_filter( interval ) circle &amp; bars . . Macroeconomic . should we show only for Denmark or globally . In this section we will attempt to perform an economic analysis from a macroeconimic point of view and in relation to the COVID-19 analysis above, we will try to come up with the potential coclusions on how the spread of the virus has affected the global economy. A closer look to Denmark will be given in this section as well. take a look on that again. . Macroeconomics is a branch of economics that studies how an overall economy behaves (focuses on the large scale). More presicely, macroeconomics studies economy-wide phenomena such as inflation, price levels, rate of economic growth, national income, gross domestic product (GDP), and changes in unemployment (Investopedia). . Stock Market . i believe this needs more discussion and what really want to show with the stocks . also i couldn&#39;t find how stocks related to macroeconomy . Talk about the stock market . # collapse-hide line = alt.Chart(stockAll).mark_line(interpolate=&#39;basis&#39;).encode( x=&#39;Date&#39;, y=&#39;Price&#39;, color=&#39;Symbol&#39;, ) nearest = alt.selection(type=&#39;single&#39;, nearest=True, on=&#39;mouseover&#39;, fields=[&#39;Date&#39;], empty=&#39;none&#39;) selectors = alt.Chart(stockAll, title=&#39;Major Index Stocks Price&#39;).mark_point().encode( x=&#39;Date&#39;, opacity=alt.value(0) ).add_selection( nearest ) # Draw points on the line, and highlight based on selection points = line.mark_point().encode( opacity=alt.condition(nearest, alt.value(1), alt.value(0)) ) # Draw text labels near the points, and highlight based on selection text = line.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=alt.condition(nearest, &#39;Price&#39;, alt.value(&#39; &#39;)) ) # Draw a rule at the location of the selection rules = alt.Chart(stockAll).mark_rule(color=&#39;gray&#39;).encode( x=&#39;Date&#39;, ).transform_filter( nearest ) # Put the five layers into a chart and bind the data alt.layer( line, selectors, points, rules, text ).properties( width=600, height=300 ) . . GDP Inflation &amp; unemployment data . Major countrys&#39; GDP Inflation and unemployment annual change rate data from IMF includes forecast of 2020 and 2021 . it would be good to illustrate how it changes along with the unemployment rate . # collapse-hide # data preprocessing def extract_data(df, subject): dates = [&#39;2014&#39;, &#39;2015&#39;, &#39;2016&#39;, &#39;2017&#39;, &#39;2018&#39;, &#39;2019&#39;, &#39;2020&#39;, &#39;2021&#39;] d = {&#39;Date&#39;: dates, &#39;Value&#39;: [df[date] for date in dates]} values = [] countries = [] _dates = [] for country in df.Country.unique(): tmp = df.loc[df.Country == country] for date in dates: countries.append(country) _dates.append(date) values.append(float(tmp[date])) rv = pd.DataFrame.from_dict({&#39;Date&#39;: _dates, &#39;Country&#39;: countries, &#39;Value&#39;: values}) rv[&#39;subject&#39;] = subject return rv unemploy = majorCountry.loc[majorCountry[&#39;Subject Descriptor&#39;] == &#39;Unemployment rate&#39;] unemploy = extract_data(unemploy, &#39;unemployment&#39;) inflation = majorCountry.loc[majorCountry[&#39;Subject Descriptor&#39;] == &#39;Inflation, average consumer prices&#39;] inflation = extract_data(inflation, &#39;inflation&#39;) gdp = majorCountry.loc[majorCountry[&#39;Subject Descriptor&#39;] == &#39;Gross domestic product, constant prices&#39;] gdp = extract_data(gdp, &#39;gdp&#39;) # A dropdown filter countries = list(majorCountry.Country.unique()) country_dropdown = alt.binding_select(options=countries) country_select = alt.selection_single(fields=[&#39;Country&#39;], bind=country_dropdown, name=&quot;Select&quot;) filter_gdp = alt.Chart(gdp, width=300, height=300, title=&#39;GDP Growth of Major Countries&#39;).mark_line(point=True).encode( alt.X(&#39;Date:T&#39;), alt.Y(&#39;Value:Q&#39;, title= &#39;Growth Rate %&#39;), color=&#39;Country&#39;, tooltip = [alt.Tooltip(&#39;Value:Q&#39;)] ).add_selection(country_select).transform_filter(country_select) # umemployment plot filter_unemployment = alt.Chart(unemploy, width=300, height=300, title=&#39;Unemployment Change of Major Countries&#39;).mark_line(point=True).encode( alt.X(&#39;Date:T&#39;), alt.Y(&#39;Value:Q&#39;, title= &#39;Growth Rate %&#39;), color=&#39;Country&#39;, tooltip = [alt.Tooltip(&#39;Value:Q&#39;)] ).add_selection(country_select).transform_filter(country_select) # inflation plot filter_inflation = alt.Chart(inflation, width=300, height=300, title=&#39;Inflation Change of Major Countries&#39;).mark_line(point=True).encode( alt.X(&#39;Date:T&#39;), alt.Y(&#39;Value:Q&#39;, title= &#39;Growth Rate %&#39;), color=&#39;Country&#39;, tooltip = [alt.Tooltip(&#39;Value:Q&#39;)] ).add_selection(country_select).transform_filter(country_select) (filter_gdp | filter_unemployment | filter_inflation) . . data source . https://ilostat.ilo.org . https://www.investing.com . https://www.imf.org . http://www.oecd.org . https://github.com/datasets/covid-19 . References . Investopedia |",
            "url": "https://narcissist1.github.io/02806-final-project/data_analysis/visualization/2020/04/13/final-project.html",
            "relUrl": "/data_analysis/visualization/2020/04/13/final-project.html",
            "date": " • Apr 13, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://narcissist1.github.io/02806-final-project/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://narcissist1.github.io/02806-final-project/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://narcissist1.github.io/02806-final-project/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://narcissist1.github.io/02806-final-project/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}
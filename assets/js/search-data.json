{
  
    
        "post0": {
            "title": "02806 Final project",
            "content": ". Tip: This page is generated from a Jupyter notebook, some of the code are hid under the hood, some of them can be shown by clicking the button Show Code. If you want to visit the complete notebook, please click the view on github button above. . Introduction . should the scope would be to show the impact in global economy or how has affected Denmark in comparison with major countries how we define major? . We can say we want to show the impact for several country not specifically Denmark, for major country is just some country that we choose (data can be easily found :P) . Undoubtedly the recent appearrance and expansion of COVID-19 virus has affected the lives of billions of people worldwide is many aspects. Goverments have been under constant challenge to reduce social interaction in order to mitigate the possibilities of virus transmission. Therefore, they have introduced hard measurements to face this severe situation which have significant impact to every body&#39;s live. . Economy was the first area that affected from those measurements. The work culture had to change to meet the derivative of the goverments, which led companies to move faster towards digitilisation. As a result companies that weren&#39;t eager in such changes to face important financial issues forcing them in many cases to reduce their human resources. For other companies such travelling agencies or copmanies in hospitalitty sector, the hit was even harder since they rely their profits entirely on the people&#39;s need for entertainment, social exploration etc.. Therefore, they have completely or partially shut down their operation leading many people in unemployment. . The above constitutes common observations and may look discouranging and demotivating facts for many people. However, we can not conclude how big this impact is in each country&#39;s overall economy without an in depth investigation of actual facts. . Upon that, we came to the desicion to analyse data from microeconomic and macroeconomic point of view in order to get a more clear understanding of how the virus has affected our economy. . To sum up, from this study we aim to provide a clear conclusion about the economic consequences due to COVID-19 which will be based on analysis of reliable sources. Through interactive and annotated graphs we want to give to the intendent audience all the information needed in order to understand the impact of COVID-19 in economy in a simple and concine manner. . Data Analysis . In the study we will analyse data from all the countries directly affected from COVID-19 giving more focus though in Denmark. We will start the study by presenting a statistical analysis of how the situation with regards to COVID-19 looks like in the most major countries. Then we will include financial data to explore whether there is a significant impact of the virus in our economy and which countries specifically have affected the most. In order to carry out the analysis we will use data from IMF, OECD and other sources which can be found at the end of the page. The reason we chose those datasets was that we believe they contain all the information needed to obtain the required outcome about the fincanial impact of COVID-19. . COVID-19 analysis . In this section, we will dive more into COVID-19 data to present the current situation of virus by illustrating the the numbers of confirmed and death cases across major countries. Then with help of interactive represenation of those numbers we will try to understand the spread rate and distribution of COVID-19. . In the following table is shown a sample of the data regarding COVID-19. The dataset contains columns with the countries, confirmed and recovered cases as well as overall deaths per country. . Date Country Confirmed Recovered Deaths . 20378 2020-05-09 | West Bank and Gaza | 375 | 228 | 2 | . 20379 2020-05-09 | Western Sahara | 6 | 5 | 0 | . 20380 2020-05-09 | Yemen | 34 | 1 | 7 | . 20381 2020-05-09 | Zambia | 252 | 112 | 7 | . 20382 2020-05-09 | Zimbabwe | 35 | 9 | 4 | . Exploration analysis . In this section we will perfrom a basic statistical analysis of the data in order to identify how the data are distibuted among the columns and to detect any important patterns that might be usefull in the further on analysis. . First, we will start by illustating the descriptive statistics of our dataset. In this way we can summarize the central tendency, dispersion and shape of our dataset&#39;s distribution. . In the table below it can be observed the great differences in the max values among the cases. The standard deviation is quite high in all the presented cases which means that our data is spread out. The 25th and 50th percentile for recovered and deaths cases is zero while the 75th percentile is 17 and 3, respectively. do you think that make sense . Yeah! . Confirmed Recovered Deaths . count 2.038300e+04 | 20383.000000 | 20383.000000 | . mean 5.236497e+03 | 1485.064171 | 346.441888 | . std 4.117972e+04 | 9779.643420 | 2851.344473 | . min 0.000000e+00 | 0.000000 | 0.000000 | . 25% 0.000000e+00 | 0.000000 | 0.000000 | . 50% 8.000000e+00 | 0.000000 | 0.000000 | . 75% 3.670000e+02 | 35.000000 | 6.000000 | . max 1.309550e+06 | 212534.000000 | 78795.000000 | . In the three figures below is illustrated how the cases distributed across the countries (for sake of simplicity and space only the countrie with less than 1000 deaths are illustrated). . In the figures is illustrated the maximum values of the cases for the corresponding countries in order to identify which countries have recorded the highest numbers of confirmed, recovered and death incidents due to COVID-19. By narrowing down to top five countries we can see that France, Spain, USA, Italy and the United Kingdom have had the higher number of confirmed cases as well as deaths. While recorded recovered cases for the top five countries includes the USA, Italy, Spain, Germany and China. By looking at the deaths it is remarkable how many deads more have the top 5 affected countries from the rest. . # collapse-hide group = full_clean_data.groupby(&#39;Country&#39;)[&#39;Deaths&#39;,&#39;Confirmed&#39;,&#39;Recovered&#39;].max().sort_values(by=[&#39;Deaths&#39;,&#39;Confirmed&#39;,&#39;Recovered&#39;]) group = pd.DataFrame(group) group = group.reset_index() # keep only the countries with more than 10000 deaths new_group = group.query(&quot;Confirmed &gt;= 100000&quot;) countries = list(new_group.Country.unique()) #define colors red = alt.value(&#39;#f54242&#39;) green = alt.value(&#39;#137E2A&#39;) black = alt.value(&#39;#050404&#39;) #presenting the confirmed cases per country bars = alt.Chart(new_group).mark_bar(size=5).encode( x=&#39;Confirmed:Q&#39;, y=alt.Y(&quot;Country:O&quot;, sort=&#39;-x&#39;),color = red ) text = bars.mark_text( align=&#39;left&#39;, baseline=&#39;middle&#39;, dx=3 # Nudges text to right so it doesn&#39;t appear on top of the bar ).encode( text=&#39;Confirmed:Q&#39;,color =black ) bars2 = alt.Chart(new_group).mark_bar(size=5).encode( x=&#39;Recovered:Q&#39;, y=alt.Y(&quot;Country:O&quot;, sort=&#39;-x&#39;),color=green ) text2 = bars2.mark_text( align=&#39;left&#39;, baseline=&#39;middle&#39;, dx=3 # Nudges text to right so it doesn&#39;t appear on top of the bar ).encode( text=&#39;Recovered:Q&#39;,color=black ) bars3 = alt.Chart(new_group).mark_bar(size=5).encode( x=&#39;Deaths:Q&#39;, y=alt.Y(&quot;Country:O&quot;, sort=&#39;-x&#39;),color=black ) text3 = bars3.mark_text( align=&#39;left&#39;, baseline=&#39;middle&#39;, dx=3 # Nudges text to right so it doesn&#39;t appear on top of the bar ).encode( text=&#39;Deaths:Q&#39;,color=black ) laydermap = (bars + text).properties(width= 250,height=300)|(bars2+text2).properties(width= 250,height=300)|(bars3+text3).properties(width=250,height=300) laydermap.configure_axis(grid=False).configure_view(strokeWidth=0) . . Looking at the basic distribution of the data it is clearly observed across all countries we have decided to focus on few major countries in order to make our analysis more robust. Therefore in the rest of study we will put more focus on the following countries: . China: Because it is the place where the Covid-19 presented for the first time. | Denmark: This is the country where this study carried out. | USA, UK, Italy, Spain, France: These countries constitute the most affected ones by the pandemic. | . Further data exploration and preparation . I was thinking to exclude Iran from the major countries and use only the rest Agree it&#39;s also hard to find finacial data about Iran . In order to extract more information as possible from the dataset it is necessary to combine several datasets. By doing so, we include columns referring to daily new cases, new deaths and new recovered cases. Other, than that an investigation for missing values and treatment of those it is also a requirement to bring the dataset in form ready for analysis. In the present study the missing values were filled with zeros. It considered the best way to treat such a values because if for example the missing values were filled with the mean, mode or median could lead to false interpration of the results. . In the following tables it is shown first a sample of the final dataset about COVID-19 after the preprossesing and secondly the descriptive stastics of the dataset. . # collapse-show # data processing to create Active, New cases, New deaths, New recovered full_clean_data[&#39;Active&#39;] = full_clean_data[&#39;Confirmed&#39;] - full_clean_data[&#39;Recovered&#39;] - full_clean_data[&#39;Deaths&#39;] selected_data = full_clean_data[full_clean_data[&#39;Country&#39;].isin(countries)] for i in selected_data.index: date = selected_data.loc[i, &#39;Date&#39;] country = selected_data.loc[i, &#39;Country&#39;] date = datetime.strptime(date, &#39;%Y-%m-%d&#39;) yesterday = datetime.strftime(date - timedelta(1), &#39;%Y-%m-%d&#39;) yesterdayData = selected_data.loc[(selected_data.Date == yesterday) &amp; (selected_data.Country == country)] if len(yesterdayData) &lt;= 0: selected_data.loc[i, &#39;New cases&#39;] = 0 selected_data.loc[i, &#39;New deaths&#39;] = 0 selected_data.loc[i, &#39;New recovered&#39;] = 0 continue yesterdayData = yesterdayData.iloc[0] selected_data.loc[i, &#39;New cases&#39;] = selected_data.loc[i, &#39;Confirmed&#39;] - yesterdayData.Confirmed selected_data.loc[i, &#39;New deaths&#39;] = selected_data.loc[i, &#39;Deaths&#39;] - yesterdayData.Deaths selected_data.loc[i, &#39;New recovered&#39;] = selected_data.loc[i, &#39;Recovered&#39;] - yesterdayData.Recovered selected_data = selected_data.fillna(value=0) selected_data[&#39;New cases&#39;] = selected_data[&#39;New cases&#39;].astype(int) selected_data[&#39;New deaths&#39;] = selected_data[&#39;New deaths&#39;].astype(int) selected_data[&#39;New recovered&#39;] = selected_data[&#39;New recovered&#39;].astype(int) . . Date Country Confirmed Recovered Deaths Active New cases New deaths New recovered . 20335 2020-05-09 | Russia | 198676 | 31916 | 1827 | 164933 | 10817 | 104 | 5308 | . 20353 2020-05-09 | Spain | 223578 | 133952 | 26478 | 63148 | 721 | 179 | 2804 | . 20368 2020-05-09 | Turkey | 137115 | 89480 | 3739 | 43896 | 1546 | 50 | 3084 | . 20369 2020-05-09 | US | 1309550 | 212534 | 78795 | 1018221 | 25621 | 1615 | 13541 | . 20373 2020-05-09 | United Kingdom | 216525 | 1001 | 31662 | 183862 | 3896 | 346 | 4 | . Confirmed Recovered Deaths Active New cases New deaths New recovered . count 1.084000e+03 | 1084.000000 | 1084.000000 | 1.084000e+03 | 1084.000000 | 1084.000000 | 1084.000000 | . mean 6.933767e+04 | 16773.800738 | 5162.204797 | 4.740166e+04 | 2695.253690 | 204.748155 | 838.583026 | . std 1.629968e+05 | 33813.060558 | 11113.507660 | 1.302762e+05 | 5776.837846 | 415.425073 | 1911.173329 | . min 0.000000e+00 | 0.000000 | 0.000000 | 0.000000e+00 | 0.000000 | 0.000000 | 0.000000 | . 25% 4.750000e+00 | 0.000000 | 0.000000 | 3.000000e+00 | 0.000000 | 0.000000 | 0.000000 | . 50% 2.598000e+03 | 45.500000 | 48.000000 | 2.403500e+03 | 476.500000 | 9.000000 | 0.000000 | . 75% 8.961625e+04 | 15611.250000 | 4353.250000 | 4.954100e+04 | 3061.000000 | 187.250000 | 1112.000000 | . max 1.309550e+06 | 212534.000000 | 78795.000000 | 1.018221e+06 | 36188.000000 | 2612.000000 | 33227.000000 | . # collapse-hide group2 = selected_data.groupby(&#39;Country&#39;)[&#39;New deaths&#39;,&#39;New cases&#39;,&#39;New recovered&#39;].max().sort_values(by=[&#39;New deaths&#39;,&#39;New cases&#39;,&#39;New recovered&#39;]) group2 = pd.DataFrame(group2) group2 = group2.reset_index() # # keep only the countries with more than 100000 confirmed new_group2 = group2 #define colors red = alt.value(&#39;#f54242&#39;) green = alt.value(&#39;#137E2A&#39;) black = alt.value(&#39;#050404&#39;) #presenting the confirmed cases per country bars = alt.Chart(new_group2).mark_bar(size=5).encode( x=&#39;New cases:Q&#39;, y=alt.Y(&quot;Country:O&quot;, sort=&#39;-x&#39;),color = red ) text = bars.mark_text( align=&#39;left&#39;, baseline=&#39;middle&#39;, dx=3 # Nudges text to right so it doesn&#39;t appear on top of the bar ).encode( text=&#39;New cases:Q&#39;,color =black ) bars2 = alt.Chart(new_group2).mark_bar(size=5).encode( x=&#39;New recovered:Q&#39;, y=alt.Y(&quot;Country:O&quot;, sort=&#39;-x&#39;),color=green ) text2 = bars2.mark_text( align=&#39;left&#39;, baseline=&#39;middle&#39;, dx=3 # Nudges text to right so it doesn&#39;t appear on top of the bar ).encode( text=&#39;New recovered:Q&#39;,color=black ) bars3 = alt.Chart(new_group2).mark_bar(size=5).encode( x=&#39;New deaths:Q&#39;, y=alt.Y(&quot;Country:O&quot;, sort=&#39;-x&#39;),color=black ) text3 = bars3.mark_text( align=&#39;left&#39;, baseline=&#39;middle&#39;, dx=3 # Nudges text to right so it doesn&#39;t appear on top of the bar ).encode( text=&#39;New deaths:Q&#39;,color=black ) laydermap = (bars + text).properties(width= 250,height=300)|(bars2+text2).properties(width= 250,height=300)|(bars3+text3).properties(width=250,height=300) laydermap.configure_axis(grid=False).configure_view(strokeWidth=0) . . Overview of COVID-19 current distribution worldwide . Now, we would like to illustrate how Covid-19 has been distributed among the analysed countries. In the first graph plot is illustrated the relation between confirmed and death cases from the day the first diagnosed case and up to now. By scrolling the slide bar under the plot it can be oserved the increase on deaths per day. It is very interesting how many more deaths compare to other countries have been recorded in the USA in only 60 days (by the time the report was written). . # collapse-hide # data processing start_date = datetime.strptime(&#39;2020-01-22&#39;, &#39;%Y-%m-%d&#39;) for index, row in selected_data.iterrows(): date = datetime.strptime(row[&#39;Date&#39;], &#39;%Y-%m-%d&#39;) selected_data.loc[index, &#39;Day&#39;] = (date - start_date).days selected_data[&#39;Day&#39;] = selected_data[&#39;Day&#39;].astype(int) # plot select_date = alt.selection_single( name=&#39;select&#39;, fields=[&#39;Day&#39;], init={&#39;Day&#39;: 0}, bind=alt.binding_range(min=0, max=selected_data.Day.max(), step=1) ) alt.Chart(selected_data, title=&#39;COVID-19 Spread Over Time&#39;).transform_filter( alt.datum.Country != &#39;Iran&#39;).mark_point(filled=True).encode( alt.X(&#39;Confirmed&#39;, scale=alt.Scale(zero=False)), alt.Y(&#39;Deaths&#39;, scale=alt.Scale(zero=False)), alt.Size(&#39;Active&#39;), alt.Color(&#39;Country&#39;), alt.Order(&#39;Confirmed&#39;, sort=&#39;descending&#39;), tooltip = [alt.Tooltip(&#39;Country&#39;), alt.Tooltip(&#39;Confirmed&#39;), alt.Tooltip(&#39;Deaths&#39;), alt.Tooltip(&#39;Active&#39;) ], ).properties( width=750, height=400 ).add_selection(select_date).transform_filter(select_date) . . Below it is illustrated how the COVID-19 has been spreaded out among major countries and how they compared to Denmark. In China where the COVID-19 first appeared, shows a high increase in number of cases per day during February and in relatively short period of time archives to diminish those numbers due to strict measurements. The rest of the countries (apart from Denmark) that didn&#39;t apply strict measurements on time we observe a high increase in new cases and no significant drop since those numbers reached their peak. In case of the USA and UK these numbers seems to keep inceasing. . # collapse-hide # plot interval = alt.selection_interval() circle = alt.Chart(selected_data, title=&#39;Spread and New Cases Over Time&#39;).transform_filter( alt.datum.Country != &#39;Iran&#39;).mark_circle().encode( x=&#39;monthdate(Date):O&#39;, y=&#39;Country&#39;, color=alt.condition(interval, &#39;Country&#39;, alt.value(&#39;lightgray&#39;)), size=alt.Size(&#39;New cases:Q&#39;, scale=alt.Scale(range=[0, 3000]), legend=alt.Legend(title=&#39;Daily new cases&#39;) ) ).properties( width=1000, height=400, selection=interval ) bars = alt.Chart(selected_data).mark_bar().encode( y=&#39;Country&#39;, color=&#39;Country&#39;, x=&#39;sum(New cases):Q&#39; ).properties( width=1000 ).transform_filter( interval ) circle &amp; bars . . Death and infection rates . #collapse-hide #data preprocessing #death rate selected_data[&#39;DeathRate&#39;] = (selected_data[&#39;Deaths&#39;]+selected_data[&#39;New deaths&#39;])/(selected_data[&#39;Confirmed&#39;]+selected_data[&#39;New cases&#39;]) * 100 selected_data = selected_data.fillna(value=0) #recovery rate selected_data[&#39;RecoveryRate&#39;] = ((selected_data[&#39;Recovered&#39;]+selected_data[&#39;New recovered&#39;])/(selected_data[&#39;Confirmed&#39;]+selected_data[&#39;New cases&#39;])) selected_data = selected_data.fillna(value=0) #infection rate population = {&#39;Denmark&#39;:5792202, &#39;Brazil&#39;:20950000, &#39;Germany&#39;:8200200, &#39;Russia&#39;:14400500, &#39;Switcherland&#39;:8570000, &#39;Turkey&#39;:82000000, &#39;China&#39;:1408526202, &#39;France&#39;:65273511, &#39;Italy&#39;:60461826, &#39;Spain&#39;:46754775, &#39;US&#39;:331002651, &#39;United Kingdom&#39;:67886011} for i in selected_data[&#39;Country&#39;]: for key,value in population.items(): if i == key: selected_data[&#39;InfectionRate&#39;] = (selected_data[&#39;Confirmed&#39;]+selected_data[&#39;New cases&#39;])/value * 100 # A dropdown filter countries = list(selected_data.Country.unique()) country_dropdown = alt.binding_select(options=countries) country_select = alt.selection_single(fields=[&#39;Country&#39;], bind=country_dropdown, name=&quot;Select&quot;) #plot death rate per infection rate filter_infectionrates = alt.Chart(selected_data, width=300, height=300, title=&#39;Infection Rate&#39;).mark_line().encode( alt.X(&#39;Date:T&#39;), alt.Y(&#39;InfectionRate:Q&#39;, title= &#39;Infection Rate %&#39;), color=&#39;Country&#39;, tooltip = [alt.Tooltip(&#39;InfectionRate:Q&#39;)] ).add_selection(country_select).transform_filter(country_select) # plot death rate filter_deathrate = alt.Chart(selected_data, width=300, height=300, title=&#39;Death Rate&#39;).mark_line().encode( alt.X(&#39;Date:T&#39;), alt.Y(&#39;DeathRate:Q&#39;, title= &#39;Death Rate %&#39;), color=&#39;Country&#39;, tooltip = [alt.Tooltip(&#39;DeathRate:Q&#39;)] ).add_selection(country_select).transform_filter(country_select) # plot infection rate filter_recovery = alt.Chart(selected_data, width=300, height=300, title=&#39;Recovery Rate&#39;).mark_line().encode( alt.X(&#39;Date:T&#39;), alt.Y(&#39;RecoveryRate:Q&#39;, title= &#39;Recovery Rate %&#39;), color=&#39;Country&#39;, tooltip = [alt.Tooltip(&#39;RecoveryRate:Q&#39;)] ).add_selection(country_select).transform_filter(country_select) (filter_infectionrates | filter_deathrate | filter_recovery) . . Macroeconomic . should we show only for Denmark or globally . In this section we will attempt to perform an economic analysis from a macroeconimic point of view and in relation to the COVID-19 analysis above, we will try to come up with the potential coclusions on how the spread of the virus has affected the global economy. A closer look to Denmark will be given in this section as well. take a look on that again. . Macroeconomics is a branch of economics that studies how an overall economy behaves (focuses on the large scale). More presicely, macroeconomics studies economy-wide phenomena such as inflation, price levels, rate of economic growth, national income, gross domestic product (GDP), and changes in unemployment (Investopedia). . Stock Market . for denmark update all shares and omx20, look again USA i dont know why the shares don&#39;t appear . Talk about the stock market . #collapse-hide # preprocessing data # France stockCAC40[&#39;Symbol&#39;]=&#39;CAC 40&#39; CACbasic[&#39;Symbol&#39;] = &#39;CAC Basic Materials&#39; CACconsumer[&#39;Symbol&#39;] = &#39;CAC Consumer Goods&#39; CACservice[&#39;Symbol&#39;] = &#39;CAC Consumer Services&#39; CACfinancial[&#39;Symbol&#39;] = &#39;CAC Financials&#39; CACutilities[&#39;Symbol&#39;] = &#39;CAC Industrials&#39; CACtech[&#39;Symbol&#39;] = &#39;CAC Technology&#39; CAChealth[&#39;Symbol&#39;] = &#39;CAC Health Care&#39; CACoil[&#39;Symbol&#39;] = &#39;CAC Oil &amp; Gas&#39; CACindustrial[&#39;Symbol&#39;] = &#39;CAC Industrials&#39; cacall[&#39;Symbol&#39;] = &#39;France All Shares&#39; stockFRA = pd.concat([stockCAC40,CACbasic,CACconsumer,CACservice,CACfinancial,CACutilities,CACtech, CAChealth,CACoil,CACindustrial,cacall],sort = True) stockFRA[&#39;Date&#39;] = pd.to_datetime(stockFRA.Date) stockFRA = stockFRA.sort_values(by=[&#39;Symbol&#39;,&#39;Date&#39;]) stockFRA[&#39;Price&#39;] = stockFRA[&#39;Price&#39;].str.replace(&#39;,&#39;,&#39;&#39;) stockFRA[&#39;Price&#39;] = stockFRA[&#39;Price&#39;].astype(float) # Italy stockMIB[&#39;Symbol&#39;]=&#39;MIB&#39; utilities[&#39;Symbol&#39;] = &#39;FTSE Utilities&#39; Technology[&#39;Symbol&#39;] = &#39;FTSE Technology&#39; O_G[&#39;Symbol&#39;] = &#39;FTSE Oil &amp; Gas&#39; Travel[&#39;Symbol&#39;] = &#39;FTSE Travel &amp; Leisure&#39; industrials[&#39;Symbol&#39;] = &#39;FTSE Industrials&#39; financials[&#39;Symbol&#39;] = &#39;FTSE Financials&#39; health[&#39;Symbol&#39;] = &#39;FTSE Health Care&#39; chemicals[&#39;Symbol&#39;] = &#39;FTSE Chemicals&#39; allsharesitalia[&#39;Symbol&#39;] = &#39;Italy All Shares&#39; stockITA = pd.concat([stockMIB,utilities,Technology,O_G,Travel, industrials,financials,health,chemicals,allsharesitalia],sort = True) stockITA[&#39;Date&#39;] = pd.to_datetime(stockITA.Date) stockITA = stockITA.sort_values(by=[&#39;Symbol&#39;,&#39;Date&#39;]) stockITA[&#39;Price&#39;] = stockITA[&#39;Price&#39;].str.replace(&#39;,&#39;,&#39;&#39;) stockITA[&#39;Price&#39;] = stockITA[&#39;Price&#39;].astype(float) # Spain ibex[&#39;Symbol&#39;]=&#39;IBEX 35&#39; materials[&#39;Symbol&#39;] = &#39;Basic Materials Industry and Construction&#39; consumer[&#39;Symbol&#39;] = &#39;Consumer Goods&#39; service[&#39;Symbol&#39;] = &#39;Services&#39; financial[&#39;Symbol&#39;] = &#39;Financial Services &amp; Real Estate&#39; petrol[&#39;Symbol&#39;] = &#39;Petrol and Power&#39; technology[&#39;Symbol&#39;] = &#39;Technology and Telecommunications&#39; spainall[&#39;Symbol&#39;] = &#39;Spain All Shares&#39; health[&#39;Symbol&#39;] = &#39;FTSE Health Care&#39; chemicals[&#39;Symbol&#39;] = &#39;FTSE Chemicals&#39; allsharesitalia[&#39;Symbol&#39;] = &#39;Italy All Shares&#39; stockSP = pd.concat([ibex,materials,consumer,service,financial,petrol,technology,spainall],sort = True) stockSP[&#39;Date&#39;] = pd.to_datetime(stockSP.Date) stockSP = stockSP.sort_values(by=[&#39;Symbol&#39;,&#39;Date&#39;]) stockSP[&#39;Price&#39;] = stockSP[&#39;Price&#39;].str.replace(&#39;,&#39;,&#39;&#39;) stockSP[&#39;Price&#39;] = stockSP[&#39;Price&#39;].astype(float) # UK ftse100[&#39;Symbol&#39;]=&#39;FTSE 100&#39; auto[&#39;Symbol&#39;] = &#39;Automobiles &amp; Parts&#39; forestry[&#39;Symbol&#39;] = &#39;Forestry &amp; Paper&#39; metals[&#39;Symbol&#39;] = &#39;Industrial Metals &amp; Mining&#39; telecom[&#39;Symbol&#39;] = &#39;Mobile Telecommunications&#39; realestate[&#39;Symbol&#39;] = &#39;Real Estate&#39; #aerospace[&#39;Symbol&#39;] = &#39;Aerospace &amp; Defense&#39; beverage[&#39;Symbol&#39;] = &#39;Beverages&#39; ukall[&#39;Symbol&#39;] = &#39;United Kingdom All Shares&#39; chemicalsuk[&#39;Symbol&#39;] = &#39;Chemicals&#39; construction[&#39;Symbol&#39;] = &#39;Construction &amp; Building Materials&#39; stockUK = pd.concat([ftse100,auto,forestry,metals,telecom,realestate,beverage,chemicalsuk,construction,ukall],sort = True) stockUK[&#39;Date&#39;] = pd.to_datetime(stockUK.Date) stockUK = stockUK.sort_values(by=[&#39;Symbol&#39;,&#39;Date&#39;]) stockUK[&#39;Price&#39;] = stockUK[&#39;Price&#39;].str.replace(&#39;,&#39;,&#39;&#39;) stockUK[&#39;Price&#39;] = stockUK[&#39;Price&#39;].astype(float) # Turky bist[&#39;Symbol&#39;]=&#39;BIST 100&#39; basictu[&#39;Symbol&#39;] = &#39;Metals &amp; Mining&#39; chemtu[&#39;Symbol&#39;] = &#39;Chem Petrol Plastic&#39; electu[&#39;Symbol&#39;] = &#39;Electricity&#39; foodtu[&#39;Symbol&#39;] = &#39;Food &amp; Beverages&#39; industrialstu[&#39;Symbol&#39;] = &#39;Industrials&#39; financialstu[&#39;Symbol&#39;] = &#39;Financial&#39; ittu[&#39;Symbol&#39;] = &#39;Information Technology&#39; tourtu[&#39;Symbol&#39;] = &#39;Tourism&#39; stockTU = pd.concat([bist,basictu,chemtu,electu,foodtu,financialstu,industrialstu,ittu, tourtu],sort = True) stockTU[&#39;Date&#39;] = pd.to_datetime(stockTU.Date) stockTU = stockTU.sort_values(by=[&#39;Symbol&#39;,&#39;Date&#39;]) stockTU[&#39;Price&#39;] = stockTU[&#39;Price&#39;].str.replace(&#39;,&#39;,&#39;&#39;) stockTU[&#39;Price&#39;] = stockTU[&#39;Price&#39;].astype(float) # USA dow30[&#39;Symbol&#39;]=&#39;Dow 30&#39; SP[&#39;Symbol&#39;] =&#39;S&amp;P 500&#39; nasdaq[&#39;Symbol&#39;] =&#39;NASDAQ&#39; #bious[&#39;Symbol&#39;] = &#39;Biotechnology&#39; banksus[&#39;Symbol&#39;] = &#39;Banks&#39; financialsus[&#39;Symbol&#39;] = &#39;Financials&#39; #healthus[&#39;Symbol&#39;] = &#39;Health Care&#39; industrialsus[&#39;Symbol&#39;] = &#39;Industrials&#39; insuranceus[&#39;Symbol&#39;] = &#39;Insurance&#39; #internetus[&#39;Symbol&#39;] = &#39;Internet&#39; computersus[&#39;Symbol&#39;] = &#39;Computers&#39; telecomus[&#39;Symbol&#39;] = &#39;Telecommunications&#39; transportationus[&#39;Symbol&#39;] = &#39;Transportation&#39; stockUS = pd.concat([dow30,SP, nasdaq,banksus,financialsus,industrialsus, insuranceus,computersus, telecomus,transportationus],sort = True) stockUS[&#39;Date&#39;] = pd.to_datetime(stockUS.Date) stockUS = stockUS.sort_values(by=[&#39;Symbol&#39;,&#39;Date&#39;]) stockUS[&#39;Price&#39;] = stockUS[&#39;Price&#39;].str.replace(&#39;,&#39;,&#39;&#39;) stockUS[&#39;Price&#39;] = stockUS[&#39;Price&#39;].astype(float) # Germany dax[&#39;Symbol&#39;]=&#39;DAX&#39; autogr[&#39;Symbol&#39;] = &#39;Automobile&#39; chemicalsgr[&#39;Symbol&#39;] = &#39;Chemicals&#39; #electricitych[&#39;Symbol&#39;] = &#39;Electricity&#39; constructiongr[&#39;Symbol&#39;] = &#39;Construction&#39; banksgr[&#39;Symbol&#39;] = &#39;Banks&#39; consumergr[&#39;Symbol&#39;] = &#39;Consumer&#39; financialsgr[&#39;Symbol&#39;] = &#39;Financial&#39; foodgr[&#39;Symbol&#39;] = &#39;Food &amp; Beverages&#39; industrialgr[&#39;Symbol&#39;] = &#39;Industrial&#39; stockGR = pd.concat([dax,autogr,chemicalsgr,constructiongr,banksgr,consumergr,financialsgr, foodgr,industrialgr],sort = True) stockGR[&#39;Date&#39;] = pd.to_datetime(stockGR.Date) stockGR = stockGR.sort_values(by=[&#39;Symbol&#39;,&#39;Date&#39;]) stockGR[&#39;Price&#39;] = stockGR[&#39;Price&#39;].str.replace(&#39;,&#39;,&#39;&#39;) stockGR[&#39;Price&#39;] = stockGR[&#39;Price&#39;].astype(float) # Russia moex[&#39;Symbol&#39;]=&#39;MOEX&#39; miningru[&#39;Symbol&#39;] = &#39;Metals &amp; Mining&#39; chemicalsru[&#39;Symbol&#39;] = &#39;Chemicals&#39; electricityru[&#39;Symbol&#39;] = &#39;Electricity&#39; oilru[&#39;Symbol&#39;] = &#39;Oil &amp; Gas&#39; transportru[&#39;Symbol&#39;] = &#39;Transport&#39; consumerru[&#39;Symbol&#39;] = &#39;Consumer&#39; financialsru[&#39;Symbol&#39;] = &#39;Financial&#39; teleru[&#39;Symbol&#39;] = &#39;Telecommunication&#39; stockRU = pd.concat([moex,miningru,chemicalsru,electricityru,oilru,transportru, consumerru,financialsru,teleru],sort = True) stockRU[&#39;Date&#39;] = pd.to_datetime(stockRU.Date) stockRU = stockRU.sort_values(by=[&#39;Symbol&#39;,&#39;Date&#39;]) stockRU[&#39;Price&#39;] = stockRU[&#39;Price&#39;].str.replace(&#39;,&#39;,&#39;&#39;) stockRU[&#39;Price&#39;] = stockRU[&#39;Price&#39;].astype(float) # Brazil bovespa[&#39;Symbol&#39;]=&#39;Bovespa&#39; basicbr[&#39;Symbol&#39;] = &#39;Basic Materials&#39; electricalbr[&#39;Symbol&#39;] = &#39;Electricity&#39; #electricitych[&#39;Symbol&#39;] = &#39;Electricity&#39; financialbr[&#39;Symbol&#39;] = &#39;Industrial&#39; industrialbr[&#39;Symbol&#39;] = &#39;Gas &amp; Water&#39; consumptionbr[&#39;Symbol&#39;] = &#39;Consumption&#39; healthbr[&#39;Symbol&#39;] = &#39;Health Care&#39; realestatebr[&#39;Symbol&#39;] = &#39;Real Estate Investment &amp; Services&#39; stockBR = pd.concat([bovespa,basicbr,electricalbr,industrialbr,consumptionbr,financialbr,healthbr, realestatebr],sort = True) stockBR[&#39;Date&#39;] = pd.to_datetime(stockBR.Date) stockBR = stockBR.sort_values(by=[&#39;Symbol&#39;,&#39;Date&#39;]) stockBR[&#39;Price&#39;] = stockBR[&#39;Price&#39;].str.replace(&#39;,&#39;,&#39;&#39;) stockBR[&#39;Price&#39;] = stockBR[&#39;Price&#39;].astype(float) # add country column stockFRA[&#39;Country&#39;]=&#39;France&#39; stockITA[&#39;Country&#39;]=&#39;Italy&#39; stockSP[&#39;Country&#39;]=&#39;Spain&#39; stockUK[&#39;Country&#39;]=&#39;UK&#39; stockUS[&#39;Country&#39;]=&#39;United States&#39; stockBR[&#39;Country&#39;]=&#39;Brazil&#39; stockGR[&#39;Country&#39;]=&#39;Germany&#39; stockRU[&#39;Country&#39;]=&#39;Russia&#39; stockTU[&#39;Country&#39;]=&#39;Turkey&#39; stocks = pd.concat([stockFRA,stockITA,stockSP,stockUK,stockUS, stockBR,stockGR,stockRU,stockTU],sort = True) #dropdown countries = list(stocks.Country.unique()) country_dropdown = alt.binding_select(options=countries) country_select = alt.selection_single(fields=[&#39;Country&#39;], bind=country_dropdown, name=&quot;Select&quot;, init={&#39;Country&#39;: &#39;United States&#39;}) line = alt.Chart(stocks, title=&#39;Major Index &amp; Primary Sectors Stocks Price (Major Countries)&#39;).mark_line(interpolate=&#39;basis&#39;,size=5).encode( x = &#39;Date&#39;, y = &#39;Price&#39;, color=&#39;Symbol&#39;, strokeDash=&#39;Symbol&#39;, tooltip = [alt.Tooltip(&#39;Symbol:N&#39;), alt.Tooltip(&#39;Price:Q&#39;)] ).properties(width=600, height=500).add_selection(country_select).transform_filter(country_select) line . . GDP Inflation &amp; unemployment data . Major countrys&#39; GDP Inflation and unemployment annual change rate data from IMF includes forecast of 2020 and 2021 . I have removed Germany because we are not icluding it in the analysis above and now we need data if possible for the UK . # collapse-hide # data preprocessing def extract_data(df, subject): dates = [&#39;2014&#39;, &#39;2015&#39;, &#39;2016&#39;, &#39;2017&#39;, &#39;2018&#39;, &#39;2019&#39;, &#39;2020&#39;, &#39;2021&#39;] d = {&#39;Date&#39;: dates, &#39;Value&#39;: [df[date] for date in dates]} values = [] countries = [] _dates = [] for country in df.Country.unique(): tmp = df.loc[df.Country == country] for date in dates: countries.append(country) _dates.append(date) values.append(float(tmp[date])) rv = pd.DataFrame.from_dict({&#39;Date&#39;: _dates, &#39;Country&#39;: countries, &#39;Value&#39;: values}) rv[&#39;subject&#39;] = subject return rv unemploy = majorCountry.loc[majorCountry[&#39;Subject Descriptor&#39;] == &#39;Unemployment rate&#39;] unemploy = extract_data(unemploy, &#39;unemployment&#39;) inflation = majorCountry.loc[majorCountry[&#39;Subject Descriptor&#39;] == &#39;Inflation, average consumer prices&#39;] inflation = extract_data(inflation, &#39;inflation&#39;) gdp = majorCountry.loc[majorCountry[&#39;Subject Descriptor&#39;] == &#39;Gross domestic product, constant prices&#39;] gdp = extract_data(gdp, &#39;gdp&#39;) # A dropdown filter countries = list(majorCountry.Country.unique()) country_dropdown = alt.binding_select(options=countries) country_select = alt.selection_single(fields=[&#39;Country&#39;], bind=country_dropdown, name=&quot;Select&quot;) filter_gdp = alt.Chart(gdp, width=300, height=300, title=&#39;GDP Growth of Major Countries&#39;).mark_line(point=True).encode( alt.X(&#39;Date:T&#39;), alt.Y(&#39;Value:Q&#39;, title= &#39;Growth Rate %&#39;), color=&#39;Country&#39;, tooltip = [alt.Tooltip(&#39;Value:Q&#39;)] ).add_selection(country_select).transform_filter(country_select) # umemployment plot filter_unemployment = alt.Chart(unemploy, width=300, height=300, title=&#39;Unemployment Change of Major Countries&#39;).mark_line(point=True).encode( alt.X(&#39;Date:T&#39;), alt.Y(&#39;Value:Q&#39;, title= &#39;Growth Rate %&#39;), color=&#39;Country&#39;, tooltip = [alt.Tooltip(&#39;Value:Q&#39;)] ).add_selection(country_select).transform_filter(country_select) # inflation plot filter_inflation = alt.Chart(inflation, width=300, height=300, title=&#39;Inflation Change of Major Countries&#39;).mark_line(point=True).encode( alt.X(&#39;Date:T&#39;), alt.Y(&#39;Value:Q&#39;, title= &#39;Growth Rate %&#39;), color=&#39;Country&#39;, tooltip = [alt.Tooltip(&#39;Value:Q&#39;)] ).add_selection(country_select).transform_filter(country_select) (filter_gdp | filter_unemployment | filter_inflation) . . Import Export plot . This one is showing quarterly change(%) of import and export data for top 10 countries . could also change to monthly but that looks a bit of too long . #collapse-hide # data preprocessing trade = trade.replace({&#39;Imports in goods (value)&#39;: &#39;Imports&#39;, &#39;Exports in goods (value)&#39;: &#39;Exports&#39;}) # trade data doesn&#39;t include Spain countries = [&#39;Italy&#39;, &#39;United States&#39;, &#39;France&#39;, &#39;Germany&#39;, &#39;Turkey&#39;, &#39;United Kingdom&#39;, &#39;Russia&#39;, &#39;Brazil&#39;] trade = trade.loc[trade.Country.isin(countries)] quarterlyTrade = trade.loc[trade.Frequency == &#39;Quarterly&#39;] monthlyTrade = trade.loc[trade.Frequency == &#39;Monthly&#39;] # a dropdown country_dropdown = alt.binding_select(options=countries) realPercent = alt.binding_radio(options=[&#39;Percentage&#39;, &#39;US Dollar&#39;]) country_select = alt.selection_single(name=&quot;Select&quot;, fields=[&#39;Country&#39;, &#39;Unit&#39;], bind={&#39;Country&#39;: country_dropdown, &#39;Unit&#39;: realPercent}, init={&#39;Country&#39;: &#39;United States&#39;, &#39;Unit&#39;: &#39;Percentage&#39;}) alt.Chart(quarterlyTrade).mark_bar().encode( x=&#39;Subject:O&#39;, y=alt.Y(&#39;Value:Q&#39;, title=&#39;Change Percentage(%) or Billion&#39;), color=alt.condition( alt.datum.Value &gt; 0, alt.value(&quot;steelblue&quot;), # The positive color alt.value(&quot;orange&quot;) # The negative color ), tooltip = [alt.Tooltip(&#39;Value:Q&#39;)], column=alt.Column(&#39;TIME:N&#39;, title=&#39;Date&#39;) ).add_selection(country_select).transform_filter(country_select) . . Discussion . data source . https://ilostat.ilo.org . https://www.investing.com . https://www.imf.org . http://www.oecd.org . https://github.com/datasets/covid-19 . References . Investopedia |",
            "url": "https://narcissist1.github.io/02806-final-project/data_analysis/visualization/2020/05/04/final-project-Short.html",
            "relUrl": "/data_analysis/visualization/2020/05/04/final-project-Short.html",
            "date": " • May 4, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "02806 Final project-Test . toc: true | badges: true | author: Georgios Zefkilis &amp; Yucheng Ren | comments: false | categories: [data_analysis, visualization] | . #collapse-hide # cov19 preprocess cov19 = cov19[[&#39;Date&#39;, &#39;Country&#39;, &#39;Confirmed&#39;, &#39;Deaths&#39;, &#39;Recovered&#39;]] cov19[&#39;Country&#39;] = cov19[&#39;Country&#39;].replace(&#39;Mainland China&#39;, &#39;China&#39;) cov19.columns = [&#39;Date&#39;, &#39;Country&#39;, &#39;Cases&#39;, &#39;Deaths&#39;, &#39;Recovered&#39;] cov19 = cov19.groupby([&#39;Date&#39;, &#39;Country&#39;])[[&#39;Cases&#39;, &#39;Deaths&#39;, &#39;Recovered&#39;]] cov19 = cov19.sum().reset_index() # ebola preprocess ebola = ebola[[&#39;Date&#39;, &#39;Country&#39;, &#39;No. of confirmed, probable and suspected cases&#39;, &#39;No. of confirmed, probable and suspected deaths&#39;]] ebola.columns = [&#39;Date&#39;, &#39;Country&#39;, &#39;Cases&#39;, &#39;Deaths&#39;] ebola = ebola.groupby([&#39;Date&#39;, &#39;Country&#39;])[[&#39;Cases&#39;, &#39;Deaths&#39;]] ebola = ebola.sum().reset_index() ebola[&#39;Cases&#39;] = ebola[&#39;Cases&#39;].fillna(0) ebola[&#39;Deaths&#39;] = ebola[&#39;Deaths&#39;].fillna(0) ebola[&#39;Cases&#39;] = ebola[&#39;Cases&#39;].astype(&#39;int&#39;) ebola[&#39;Deaths&#39;] = ebola[&#39;Deaths&#39;].astype(&#39;int&#39;) # h1n1 preprocess h1n1 = h1n1[[&#39;Update Time&#39;, &#39;Country&#39;, &#39;Cases&#39;, &#39;Deaths&#39;]] h1n1.columns = [&#39;Date&#39;, &#39;Country&#39;, &#39;Cases&#39;, &#39;Deaths&#39;] h1n1 = h1n1.groupby([&#39;Date&#39;, &#39;Country&#39;])[[&#39;Cases&#39;, &#39;Deaths&#39;]] h1n1 = h1n1.sum().reset_index() # sars preprocess sars = sars[[&#39;Date&#39;, &#39;Country&#39;, &#39;Cumulative number of case(s)&#39;, &#39;Number of deaths&#39;, &#39;Number recovered&#39;]] sars.columns = [&#39;Date&#39;, &#39;Country&#39;, &#39;Cases&#39;, &#39;Deaths&#39;, &#39;Recovered&#39;] sars = sars.groupby([&#39;Date&#39;, &#39;Country&#39;])[[&#39;Cases&#39;, &#39;Deaths&#39;, &#39;Recovered&#39;]] sars = sars.sum().reset_index() . . Basic Data Analysis&#182; . # collapse-hide def averagePerDay(disease, attr=&#39;Cases&#39;): allCases = disease[attr].max() days = len(disease.Date.unique()) return allCases * 1.0 / days def getTimeSpan(disease): return (disease.Date.min(), disease.Date.max(), len(disease.Date.unique())) print(&quot;Time span for our data:&quot;) for key, value in dataset.items(): start, end, span = getTimeSpan(value) print(key, &#39;starts from &#39;, start, &#39; ends at &#39;, end, &#39; duration &#39;, span, &#39;days&#39;) print() print(&quot;Average confirmed cases per day for each disease&quot;) for key, value in dataset.items(): cases = averagePerDay(value) print(key, &#39;average confirmed&#39;, cases) print() print(&quot;Average death cases per day for each disease&quot;) for key, value in dataset.items(): cases = averagePerDay(value, &#39;Deaths&#39;) print(key, &#39;average death&#39;, cases) . . Comparison with Other Infectious Virus .",
            "url": "https://narcissist1.github.io/02806-final-project/2020/04/20/test2-project.html",
            "relUrl": "/2020/04/20/test2-project.html",
            "date": " • Apr 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "02806 Final project",
            "content": ". Tip: This page is generated from a Jupyter notebook, some of the code are hid under the hood, some of them can be shown by clicking the button Show Code. If you want to visit the complete notebook, please click the view on github button above. . Introduction . should the scope would be to show the impact in global economy or how has affected Denmark in comparison with major countries how we define major? . Undoubtedly the recent appearrance and expansion of COVID-19 virus has affected the lives of billions of people worldwide is many aspects. Goverments have been under constant challenge to reduce social interaction in order to mitigate the possibilities of virus transmission. Therefore, they have introduced hard measurements to face this severe situation which have significant impact to every body&#39;s live. . Economy was the first area that affected from those measurements. The work culture had to change to meet the derivative of the goverments, which led companies to move faster towards digitilisation. As a result companies that weren&#39;t eager in such changes to face important financial issues forcing them in many cases to reduce their human resources. For other companies such travelling agencies or copmanies in hospitalitty sector, the hit was even harder since they rely their profits entirely on the people&#39;s need for entertainment, social exploration etc.. Therefore, they have completely or partially shut down their operation leading many people in unemployment. . The above constitutes common observations and may look discouranging and demotivating facts for many people. However, we can not conclude how big this impact is in each country&#39;s overall economy without an in depth investigation of actual facts. . Upon that, we came to the desicion to analyse data from microeconomic and macroeconomic point of view in order to get a more clear understanding of how the virus has affected our economy. . To sum up, from this study we aim to provide a clear conclusion about the economic consequences due to COVID-19 which will be based on analysis of reliable sources. Through interactive and annotated graphs we want to give to the intendent audience all the information needed in order to understand the impact of COVID-19 in economy in a simple and concine manner. . Data Analysis . In the study we will analyse data from all the countries directly affected from COVID-19 giving more focus though in Denmark. We will start the study by presenting a statistical analysis of how the situation with regards to COVID-19 looks like in the most major countries. Then we will include financial data to explore whether there is a significant impact of the virus in our economy and which countries specifically have affected the most. In order to carry out the analysis we will use data from IMF, OECD and other sources which can be found at the end of the page. The reason we chose those datasets was that we believe they contain all the information needed to obtain the required outcome about the fincanial impact of COVID-19. . COVID-19 analysis . In this section, we will dive more into COVID-19 data to present the current situation of virus by illustrating the the numbers of confirmed and death cases across major countries. Then with help of interactive represenation of those numbers we will try to understand the spread rate and distribution of COVID-19. . In the following table is shown a sample of the data regarding COVID-19. The dataset contains columns with the countries, confirmed and recovered cases as well as overall deaths per country. . Date Country Confirmed Recovered Deaths . 19069 2020-05-02 | West Bank and Gaza | 353 | 76 | 2 | . 19070 2020-05-02 | Western Sahara | 6 | 5 | 0 | . 19071 2020-05-02 | Yemen | 10 | 1 | 2 | . 19072 2020-05-02 | Zambia | 119 | 75 | 3 | . 19073 2020-05-02 | Zimbabwe | 34 | 5 | 4 | . Exploration analysis . In this section we will perfrom a basic statistical analysis of the data in order to identify how the data are distibuted among the columns and to detect any important patterns that might be usefull in the further on analysis. . First, we will start by illustating the descriptive statistics of our dataset. In this way we can summarize the central tendency, dispersion and shape of our dataset&#39;s distribution. . In the table below it can be observed the great differences in the max values among the cases. The standard deviation is quite high in all the presented cases which means that our data is spread out. The 25th and 50th percentile for recovered and deaths cases is zero while the 75th percentile is 17 and 3, respectively. do you think that make sense . Confirmed Recovered Deaths . count 1.907400e+04 | 19074.000000 | 19074.000000 | . mean 4.216215e+03 | 1130.094841 | 273.549754 | . std 3.400320e+04 | 7936.359907 | 2343.467559 | . min 0.000000e+00 | 0.000000 | 0.000000 | . 25% 0.000000e+00 | 0.000000 | 0.000000 | . 50% 5.000000e+00 | 0.000000 | 0.000000 | . 75% 2.417500e+02 | 19.000000 | 4.000000 | . max 1.132539e+06 | 175382.000000 | 66369.000000 | . In the three figures below is illustrated how the cases distributed across the countries (for sake of simplicity and space only the countrie with less than 1000 deaths are illustrated). . In the figures is illustrated the maximum values of the cases for the corresponding countries in order to identify which countries have recorded the highest numbers of confirmed, recovered and death incidents due to COVID-19. By narrowing down to top five countries we can see that France, Spain, USA, Italy and the United Kingdom have had the higher number of confirmed cases as well as deaths. While recorded recovered cases for the top five countries includes the USA, Italy, Spain, Germany and China. By looking at the deaths it is remarkable how many deads more have the top 5 affected countries from the rest. . # collapse-show group = full_clean_data.groupby(&#39;Country&#39;)[&#39;Deaths&#39;,&#39;Confirmed&#39;,&#39;Recovered&#39;].max().sort_values(by=[&#39;Deaths&#39;,&#39;Confirmed&#39;,&#39;Recovered&#39;]) group = pd.DataFrame(group) group = group.reset_index() # keep only the countries with more than 10000 deaths new_group = group.query(&quot;Deaths &gt;= 1000&quot;) #define colors red = alt.value(&#39;#f54242&#39;) green = alt.value(&#39;#137E2A&#39;) black = alt.value(&#39;#050404&#39;) #presenting the confirmed cases per country bars = alt.Chart(new_group).mark_bar(size=5).encode( x=&#39;Confirmed:Q&#39;, y=alt.Y(&quot;Country:O&quot;, sort=&#39;-x&#39;),color = red ) text = bars.mark_text( align=&#39;left&#39;, baseline=&#39;middle&#39;, dx=3 # Nudges text to right so it doesn&#39;t appear on top of the bar ).encode( text=&#39;Confirmed:Q&#39;,color =black ) bars2 = alt.Chart(new_group).mark_bar(size=5).encode( x=&#39;Recovered:Q&#39;, y=alt.Y(&quot;Country:O&quot;, sort=&#39;-x&#39;),color=green ) text2 = bars2.mark_text( align=&#39;left&#39;, baseline=&#39;middle&#39;, dx=3 # Nudges text to right so it doesn&#39;t appear on top of the bar ).encode( text=&#39;Recovered:Q&#39;,color=black ) bars3 = alt.Chart(new_group).mark_bar(size=5).encode( x=&#39;Deaths:Q&#39;, y=alt.Y(&quot;Country:O&quot;, sort=&#39;-x&#39;),color=black ) text3 = bars3.mark_text( align=&#39;left&#39;, baseline=&#39;middle&#39;, dx=3 # Nudges text to right so it doesn&#39;t appear on top of the bar ).encode( text=&#39;Deaths:Q&#39;,color=black ) laydermap = (bars + text).properties(width= 250,height=300)|(bars2+text2).properties(width= 250,height=300)|(bars3+text3).properties(width=250,height=300) laydermap.configure_axis(grid=False).configure_view(strokeWidth=0) . . Looking at the basic distribution of the data it is clearly observed across all countries we have decided to focus on few major countries in order to make our analysis more robust. Therefore in the rest of study we will put more focus on the following countries: . China: Because it is the place where the Covid-19 presented for the first time. | Denmark: This is the country where this study carried out. | USA, UK, Italy, Spain, France: These countries constitute the most affected ones by the pandemic. | . Further data exploration and preparation . I was thinking to exclude Iran from the major countries and use only the rest . In order to extract more information as possible from the dataset it is necessary to combine several datasets. By doing so, we include columns referring to daily new cases, new deaths and new recovered cases. Other, than that an investigation for missing values and treatment of those it is also a requirement to bring the dataset in form ready for analysis. In the present study the missing values were filled with zeros. It considered the best way to treat such a values because if for example the missing values were filled with the mean, mode or median could lead to false interpration of the results. . In the following tables it is shown first a sample of the final dataset about COVID-19 after the preprossesing and secondly the descriptive stastics of the dataset. . # collapse-show # data processing to create Active, New cases, New deaths, New recovered full_clean_data[&#39;Active&#39;] = full_clean_data[&#39;Confirmed&#39;] - full_clean_data[&#39;Recovered&#39;] - full_clean_data[&#39;Deaths&#39;] countries = [&#39;US&#39;, &#39;Italy&#39;, &#39;China&#39;, &#39;Spain&#39;, &#39;France&#39;, &#39;Iran&#39;, &#39;United Kingdom&#39;, &#39;Denmark&#39;] selected_data = full_clean_data[full_clean_data[&#39;Country&#39;].isin(countries)] for i in selected_data.index: date = selected_data.loc[i, &#39;Date&#39;] country = selected_data.loc[i, &#39;Country&#39;] date = datetime.strptime(date, &#39;%Y-%m-%d&#39;) yesterday = datetime.strftime(date - timedelta(1), &#39;%Y-%m-%d&#39;) yesterdayData = selected_data.loc[(selected_data.Date == yesterday) &amp; (selected_data.Country == country)] if len(yesterdayData) &lt;= 0: selected_data.loc[i, &#39;New cases&#39;] = 0 selected_data.loc[i, &#39;New deaths&#39;] = 0 selected_data.loc[i, &#39;New recovered&#39;] = 0 continue yesterdayData = yesterdayData.iloc[0] selected_data.loc[i, &#39;New cases&#39;] = selected_data.loc[i, &#39;Confirmed&#39;] - yesterdayData.Confirmed selected_data.loc[i, &#39;New deaths&#39;] = selected_data.loc[i, &#39;Deaths&#39;] - yesterdayData.Deaths selected_data.loc[i, &#39;New recovered&#39;] = selected_data.loc[i, &#39;Recovered&#39;] - yesterdayData.Recovered selected_data = selected_data.fillna(value=0) selected_data[&#39;New cases&#39;] = selected_data[&#39;New cases&#39;].astype(int) selected_data[&#39;New deaths&#39;] = selected_data[&#39;New deaths&#39;].astype(int) selected_data[&#39;New recovered&#39;] = selected_data[&#39;New recovered&#39;].astype(int) . . Date Country Confirmed Recovered Deaths Active New cases New deaths New recovered . 18968 2020-05-02 | Iran | 96448 | 77350 | 6156 | 12942 | 802 | 65 | 1032 | . 18972 2020-05-02 | Italy | 209328 | 79914 | 28710 | 100704 | 1900 | 474 | 1665 | . 19044 2020-05-02 | Spain | 216582 | 117248 | 25100 | 74234 | 3147 | 557 | 5198 | . 19060 2020-05-02 | US | 1132539 | 175382 | 66369 | 890788 | 29078 | 1426 | 11367 | . 19064 2020-05-02 | United Kingdom | 183500 | 896 | 28205 | 154399 | 4815 | 622 | 4 | . Confirmed Recovered Deaths Active New cases New deaths New recovered . count 8.100000e+02 | 810.000000 | 810.000000 | 810.000000 | 810.000000 | 810.000000 | 810.000000 | . mean 6.571904e+04 | 16897.351852 | 5075.017284 | 43746.675309 | 2604.774074 | 223.482716 | 718.943210 | . std 1.471835e+05 | 29178.478531 | 9996.622673 | 121351.038650 | 6164.895180 | 443.875914 | 1818.560247 | . min 0.000000e+00 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | . 25% 1.100000e+01 | 1.000000 | 0.000000 | 7.000000 | 0.000000 | 0.000000 | 0.000000 | . 50% 6.467000e+03 | 192.500000 | 225.500000 | 2362.000000 | 155.000000 | 8.000000 | 10.000000 | . 75% 8.164350e+04 | 21802.000000 | 4623.250000 | 35503.250000 | 2551.250000 | 217.250000 | 874.000000 | . max 1.132539e+06 | 175382.000000 | 66369.000000 | 890788.000000 | 36188.000000 | 2612.000000 | 33227.000000 | . COVID-19 presentation in Denmark . check this part again. Do you think we should show results for denmark separately? I was thinking to show all the major countried together. Although in this case Denmark has very low number of case compare to other countries. . The figure below illustrates the total confirmed cases and deaths in Denmark from the day the virus appeared in the country (approximately January 22) until April 23. we can either update the date or just stop to the day the lockdown stopped . It seems that even during the lock down (10/03/2020 - 20/03/20) the number of confirmed cases and deaths showed an increasing trend. Although it has to be highlighted that the purpose of lock down was to keep these numbers as low as possible in order not to exceed the capacity of the cases that the health system can handle. maybe we can find data about that and include them to see if they get the target . # collapse-hide denmark = selected_data[selected_data[&#39;Country&#39;] == &#39;Denmark&#39;] base = alt.Chart(denmark).mark_bar().encode( x=&#39;monthdate(Date):O&#39;, ).properties( width=250 ) red = alt.value(&#39;#f54242&#39;) base.encode(y=&#39;Confirmed&#39;).properties(title=&#39;Total Confirmed&#39;) | base.encode(y=&#39;Deaths&#39;, color=red).properties(title=&#39;Total Deaths&#39;)|base.encode(y=&#39;New cases&#39;).properties(title=&#39;Daily New Cases&#39;) | base.encode(y=&#39;New deaths&#39;, color=red).properties(title=&#39;Daily New Deaths&#39;) . . Moving forward to the figures, it is observed the number of new incidents(3rd pane from left) and deaths (4th pane from the left) in Denmark during the same period. . When the lock down implemented (around 10th of March) and until the 13th of the same month 170 new cases were recorded daily. Whereas on the 14th of March a significant drop of approximatelly 75% of the cases recorded is observed. Between, March the 24th and April the 9th the number of confirmed cases reached its peak with an average of 300 cases per day. Then the recorded cases began to drop again until today where they have reached of an average 150 cases per day(10/05/2020 - 23/05/2020). . The number of daily deaths reached its highest numbers between 3rd and 9th of April and dropped by approximatelly 50% after that. By today the number of deaths per day doesn&#39;t exceed the 9 deaths. Overall, we can see that the measurments against the virus yielded in reduction of deaths and confirmed cases after its implementation. . #collapse-hide base = alt.Chart(selected_data).mark_bar().encode( x=&#39;monthdate(Date):O&#39;, ).properties(width=500) base.encode(y=&#39;Confirmed&#39;,color=&#39;Country&#39;).properties(title = &#39;Total confirmed&#39;)|base.encode(y=&#39;Deaths&#39;,color = &#39;Country&#39;).properties(title=&#39;Total deaths&#39;) . . #collapse-hide base = alt.Chart(selected_data).mark_bar().encode( x=&#39;monthdate(Date):O&#39;,color=&quot;Country&quot; ).properties(width=600,height=300) base.encode(y=alt.Y(&quot;New cases:Q&quot;))|base.encode(y=alt.Y(&quot;New deaths:Q&quot;)) . . #collapse-hide # base = alt.Chart(selected_data).transform_filter( # alt.datum.symbol != &#39;GOOG&#39; # ).mark_area().encode( # x=&#39;monthdate(Date):O&#39;, # color=&#39;Country:N&#39;, # row=alt.Row(&#39;Country:N&#39;, sort=[&#39;US&#39;, &#39;United Kingdom&#39;, &#39;Italy&#39;, &#39;Spain&#39;,&#39;France&#39;,&#39;Iran&#39;,&#39;China&#39;,&#39;Denmark&#39;]) # ).properties(height=50, width=400) # base.encode(y=&#39;New cases:Q&#39;) . . # collapse-hide #base.encode(y=&#39;New cases&#39;).properties(title=&#39;Daily New Cases&#39;) | base.encode(y=&#39;New deaths&#39;, color=red).properties(title=&#39;Daily New Deaths&#39;) . . After the investigation onn new cases and deaths we would like to check how the death rate for each of the countries has been formed. The figure below show exactly this. By pointing on each line we can get the exact value of death rate for the major countries. As we can see there is an increasing trend in death rate as the virus spreading out. Chine is the only country that seemed to record a steady state from 12th of March to the 12th of April. Suprisingly the USA has a realtively low death rate if a man consider the high number of incidents that have been recordered the last couple of months. Another, interesting observation is the curve in the first half of March, in case of France, and how it goes up again in period of only 1.5 month. maybe we can include the deaths compare to the population . # collapse-hide # data processing selected_data[&#39;DeathRate&#39;] = selected_data[&#39;Deaths&#39;] / selected_data[&#39;Confirmed&#39;] * 100 selected_data = selected_data.fillna(value=0) # plot highlight = alt.selection(type=&#39;single&#39;, on=&#39;mouseover&#39;, fields=[&#39;Country&#39;], nearest=True) base = alt.Chart(selected_data, title=&#39;Death Rate Among Major Countries&#39;).transform_filter( alt.datum.Country != &#39;Iran&#39; ).encode( x=&#39;Date:T&#39;, y=alt.Y(&#39;DeathRate:Q&#39;, title= &#39;Death Rate %&#39;), color=&#39;Country:N&#39;, tooltip = [alt.Tooltip(&#39;DeathRate&#39;), alt.Tooltip(&#39;Country&#39;), ], ) points = base.mark_circle().encode( opacity=alt.value(0) ).add_selection( highlight ).properties( width=600 ) lines = base.mark_line().encode( size=alt.condition(~highlight, alt.value(1), alt.value(3)) ) points + lines . . #collapse-hide population = {&#39;Denmark&#39;:5792202, &#39;China&#39;:1408526202, &#39;France&#39;:65273511, &#39;Italy&#39;:60461826, &#39;Spain&#39;:46754775, &#39;US&#39;:331002651, &#39;United Kingdom&#39;:67886011} for i in selected_data[&#39;Country&#39;]: for key,value in population.items(): if i == key: selected_data[&#39;InfectionRate&#39;] = selected_data[&#39;Confirmed&#39;]/value * 100 # plot highlight = alt.selection(type=&#39;single&#39;, on=&#39;mouseover&#39;, fields=[&#39;Country&#39;], nearest=True) base = alt.Chart(selected_data, title=&#39;Infection Rate Among Major Countries&#39;).transform_filter( alt.datum.Country != &#39;Iran&#39; ).encode( x=&#39;Date:T&#39;, y=alt.Y(&#39;InfectionRate:Q&#39;, title= &#39;Infection Rate %&#39;), color=&#39;Country:N&#39;, tooltip = [alt.Tooltip(&#39;InfectionRate&#39;), alt.Tooltip(&#39;Country&#39;), ], ) points = base.mark_circle().encode( opacity=alt.value(0) ).add_selection( highlight ).properties( width=700 ) lines = base.mark_line().encode( size=alt.condition(~highlight, alt.value(1), alt.value(3)) ) points + lines . . Overview of COVID-19 current distribution worldwide . Now, we would like to illustrate how Covid-19 has been distributed among the analysed countries. In the first graph plot is illustrated the relation between confirmed and death cases from the day the first diagnosed case and up to now. By scrolling the slide bar under the plot it can be oserved the increase on deaths per day. It is very interesting how many more deaths compare to other countries have been recorded in the USA in only 60 days (by the time the report was written). . # collapse-hide # data processing start_date = datetime.strptime(&#39;2020-01-22&#39;, &#39;%Y-%m-%d&#39;) for index, row in selected_data.iterrows(): date = datetime.strptime(row[&#39;Date&#39;], &#39;%Y-%m-%d&#39;) selected_data.loc[index, &#39;Day&#39;] = (date - start_date).days selected_data[&#39;Day&#39;] = selected_data[&#39;Day&#39;].astype(int) # plot select_date = alt.selection_single( name=&#39;select&#39;, fields=[&#39;Day&#39;], init={&#39;Day&#39;: 0}, bind=alt.binding_range(min=0, max=selected_data.Day.max(), step=1) ) alt.Chart(selected_data, title=&#39;COVID-19 Spread Over Time&#39;).transform_filter( alt.datum.Country != &#39;Iran&#39;).mark_point(filled=True).encode( alt.X(&#39;Confirmed&#39;, scale=alt.Scale(zero=False)), alt.Y(&#39;Deaths&#39;, scale=alt.Scale(zero=False)), alt.Size(&#39;Active&#39;), alt.Color(&#39;Country&#39;), alt.Order(&#39;Confirmed&#39;, sort=&#39;descending&#39;), tooltip = [alt.Tooltip(&#39;Confirmed&#39;), alt.Tooltip(&#39;Deaths&#39;), alt.Tooltip(&#39;Active&#39;) ], ).properties( width=750, height=400 ).add_selection(select_date).transform_filter(select_date) . . Below it is illustrated how the COVID-19 has been spreaded out among major countries and how they compared to Denmark. In China where the COVID-19 first appeared, shows a high increase in number of cases per day during February and in relatively short period of time archives to diminish those numbers due to strict measurements. The rest of the countries (apart from Denmark) that didn&#39;t apply strict measurements on time we observe a high increase in new cases and no significant drop since those numbers reached their peak. In case of the USA and UK these numbers seems to keep inceasing. . # collapse-hide # plot interval = alt.selection_interval() circle = alt.Chart(selected_data, title=&#39;Spread and New Cases Over Time&#39;).transform_filter( alt.datum.Country != &#39;Iran&#39;).mark_circle().encode( x=&#39;monthdate(Date):O&#39;, y=&#39;Country&#39;, color=alt.condition(interval, &#39;Country&#39;, alt.value(&#39;lightgray&#39;)), size=alt.Size(&#39;New cases:Q&#39;, scale=alt.Scale(range=[0, 3000]), legend=alt.Legend(title=&#39;Daily new cases&#39;) ) ).properties( width=1000, height=400, selection=interval ) bars = alt.Chart(selected_data).mark_bar().encode( y=&#39;Country&#39;, color=&#39;Country&#39;, x=&#39;sum(New cases):Q&#39; ).properties( width=1000 ).transform_filter( interval ) circle &amp; bars . . # collapse-hide # data preperation, combine refrence dataset to virus dataset to obtain area code for map plot refrence = refrence.rename(columns={&#39;Country_Region&#39;: &#39;Country/Region&#39;}) most_recent_data = world_data[world_data[&#39;Date&#39;] == world_data[&#39;Date&#39;].max()] most_recent_data = most_recent_data[[&#39;Date&#39;, &#39;Country/Region&#39;, &#39;Confirmed&#39;,&#39;Recovered&#39;,&#39;Deaths&#39;]] grouped = most_recent_data.groupby(&#39;Country/Region&#39;).sum() result = grouped.join(refrence.set_index(&#39;Combined_Key&#39;), on=&#39;Country/Region&#39;) result = result.fillna(value=0) result[&#39;code3&#39;] = result[&#39;code3&#39;].astype(int) # plot alt.Chart(alt.topo_feature(data.world_110m.url, &#39;countries&#39;), title=&#39;Confirmed Cases Map&#39;).mark_geoshape( stroke=&#39;#aaa&#39;, strokeWidth=0.25 ).transform_lookup( lookup=&#39;id&#39;, from_=alt.LookupData(data=result, key=&#39;code3&#39;, fields=[&#39;Confirmed&#39;]) ).encode( alt.Color(&#39;Confirmed:Q&#39;, scale=alt.Scale(domain=[0, result.Confirmed.max()/10], clamp=True), legend=alt.Legend(format=&#39;&#39;)), alt.Tooltip(&#39;Confirmed:Q&#39;) ).project( type=&#39;equirectangular&#39; ).properties( width=900, height=500 ).configure_view( stroke=None ) . . Macroeconomic . should we show only for Denmark or globally . In this section we will attempt to perform an economic analysis from a macroeconimic point of view and in relation to the COVID-19 analysis above, we will try to come up with the potential coclusions on how the spread of the virus has affected the global economy. A closer look to Denmark will be given in this section as well. take a look on that again. . Macroeconomics is a branch of economics that studies how an overall economy behaves (focuses on the large scale). More presicely, macroeconomics studies economy-wide phenomena such as inflation, price levels, rate of economic growth, national income, gross domestic product (GDP), and changes in unemployment (Investopedia). . Stock Market . for denmark update all shares and omx20, look again USA i dont know why the shares don&#39;t appear . Talk about the stock market . # collapse-hide #import sectors data chemicalsdk = pd.read_csv(path+&#39;Copenhagen Chemicals Historical Data.csv&#39;) consumersdk = pd.read_csv(path+&#39;Copenhagen Consumer Goods Historical Data.csv&#39;) servicesdk = pd.read_csv(path+&#39;Copenhagen Consumer Services Historical Data.csv&#39;) financialsdk = pd.read_csv(path+&#39;Copenhagen Financials Historical Data.csv&#39;) healthdk = pd.read_csv(path+&#39;Copenhagen Health Care Historical Data.csv&#39;) industrialsdk = pd.read_csv(path+&#39;Copenhagen Industrials Historical Data.csv&#39;) ogdk = pd.read_csv(path+&#39;Copenhagen Oil &amp; Gas Historical Data.csv&#39;) realdk = pd.read_csv(path+&#39;Copenhagen Real Estate Historical Data.csv&#39;) technologydk = pd.read_csv(path+&#39;Copenhagen Technology Historical Data.csv&#39;) # stock data preprocessing stockOMX20[&#39;Symbol&#39;] = &#39;OMX 20&#39; stockCopenhagenAllShare[&#39;Symbol&#39;] = &#39;Copenhagen All Shares&#39; #stockOMX25[&#39;Symbol&#39;] = &#39;OMX 25&#39; chemicalsdk[&#39;Symbol&#39;] = &#39;Chemicals&#39; consumersdk[&#39;Symbol&#39;] = &#39;Consumer Goods&#39; servicesdk[&#39;Symbol&#39;] = &#39;Consumer Services&#39; financialsdk[&#39;Symbol&#39;] = &#39;Financials&#39; healthdk[&#39;Symbol&#39;] = &#39;Health Care&#39; industrialsdk[&#39;Symbol&#39;] = &#39;Industrials&#39; ogdk[&#39;Symbol&#39;] = &#39;Oil &amp; Gas&#39; realdk[&#39;Symbol&#39;] = &#39;Real Estate&#39; technologydk[&#39;Symbol&#39;] = &#39;Technology&#39; stockAll = pd.concat([stockOMX20, stockCopenhagenAllShare,chemicalsdk,consumersdk,servicesdk,financialsdk, healthdk,industrialsdk,ogdk,realdk,technologydk]) stockAll[&#39;Date&#39;] = pd.to_datetime(stockAll.Date) stockAll = stockAll.sort_values(by=[&#39;Symbol&#39;, &#39;Date&#39;]) stockAll[&#39;Price&#39;] = stockAll[&#39;Price&#39;].str.replace(&#39;,&#39;, &#39;&#39;) stockAll[&#39;Price&#39;] = stockAll[&#39;Price&#39;].astype(float) . . #collapse-hide line = alt.Chart(stockAll).mark_line(interpolate=&#39;basis&#39;).encode( x=&#39;Date&#39;, y=&#39;Price&#39;, color=&#39;Symbol:N&#39;, ) nearest = alt.selection(type=&#39;single&#39;, nearest=True, on=&#39;mouseover&#39;, fields=[&#39;Date&#39;], empty=&#39;none&#39;) selectors = alt.Chart(stockAll, title=&#39;Major Index and Primary Sectors Stocks Price (Denmark) &#39;).mark_point().encode( x=&#39;Date&#39;, opacity=alt.value(0) ).add_selection( nearest ) # Draw points on the line, and highlight based on selection points = line.mark_point().encode( opacity=alt.condition(nearest, alt.value(1), alt.value(0)) ) # Draw text labels near the points, and highlight based on selection text = line.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=alt.condition(nearest, &#39;Price&#39;, alt.value(&#39; &#39;)) ) # Draw a rule at the location of the selection rules = alt.Chart(stockAll).mark_rule(color=&#39;gray&#39;).encode( x=&#39;Date&#39;, ).transform_filter( nearest ) # Put the five layers into a chart and bind the data alt.layer( line, selectors, points, rules, text ).properties( width=600, height=300 ) . . #collapse-hide # stock data preprocessing for France # Top 40 companies in France stockCAC40 = pd.read_csv(path+&#39;CAC40.csv&#39;) # importing sectors CACbasic = pd.read_csv(path+&#39;CACBasicMaterials.csv&#39;) CACconsumer=pd.read_csv(path+&#39;CACConsumerGoods.csv&#39;) CACservice =pd.read_csv(path+&#39;CACConsumerService.csv&#39;) CACfinancial =pd.read_csv(path+&#39;CACFinancials.csv&#39;) CACutilities =pd.read_csv(path+&#39;CACUtilities.csv&#39;) CACtech =pd.read_csv(path+&#39;CACTechnology.csv&#39;) CAChealth =pd.read_csv(path+&#39;CACHealthCare.csv&#39;) CACoil =pd.read_csv(path+&#39;CACOil&amp;Gas.csv&#39;) CACindustrial =pd.read_csv(path+&#39;CACIndustrials.csv&#39;) cacall = pd.read_csv(path+&#39;CAC All Shares.csv&#39;) #prepare the data for plotting stockCAC40[&#39;Symbol&#39;]=&#39;CAC 40&#39; CACbasic[&#39;Symbol&#39;] = &#39;CAC Basic Materials&#39; CACconsumer[&#39;Symbol&#39;] = &#39;CAC Consumer Goods&#39; CACservice[&#39;Symbol&#39;] = &#39;CAC Consumer Services&#39; CACfinancial[&#39;Symbol&#39;] = &#39;CAC Financials&#39; CACutilities[&#39;Symbol&#39;] = &#39;CAC Industrials&#39; CACtech[&#39;Symbol&#39;] = &#39;CAC Technology&#39; CAChealth[&#39;Symbol&#39;] = &#39;CAC Health Care&#39; CACoil[&#39;Symbol&#39;] = &#39;CAC Oil &amp; Gas&#39; CACindustrial[&#39;Symbol&#39;] = &#39;CAC Industrials&#39; cacall[&#39;Symbol&#39;] = &#39;France All Shares&#39; stockFRA = pd.concat([stockCAC40,CACbasic,CACconsumer,CACservice,CACfinancial,CACutilities,CACtech, CAChealth,CACoil,CACindustrial,cacall],sort = True) stockFRA[&#39;Date&#39;] = pd.to_datetime(stockFRA.Date) stockFRA = stockFRA.sort_values(by=[&#39;Symbol&#39;,&#39;Date&#39;]) stockFRA[&#39;Price&#39;] = stockFRA[&#39;Price&#39;].str.replace(&#39;,&#39;,&#39;&#39;) stockFRA[&#39;Price&#39;] = stockFRA[&#39;Price&#39;].astype(float) . . # collapse-hide line = alt.Chart(stockFRA).mark_line(interpolate=&#39;basis&#39;).encode( x=&#39;Date&#39;, y=&#39;Price&#39;, color=&#39;Symbol&#39;, ) nearest = alt.selection(type=&#39;single&#39;, nearest=True, on=&#39;mouseover&#39;, fields=[&#39;Date&#39;], empty=&#39;none&#39;) selectors = alt.Chart(stockFRA, title=&#39;Major Index &amp; Primary Sectors Stocks Price(France)&#39;).mark_point().encode( x=&#39;Date&#39;, opacity=alt.value(0) ).add_selection( nearest ) # Draw points on the line, and highlight based on selection points = line.mark_point().encode( opacity=alt.condition(nearest, alt.value(1), alt.value(0)) ) # Draw text labels near the points, and highlight based on selection text = line.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=alt.condition(nearest, &#39;Price&#39;, alt.value(&#39; &#39;)) ) # Draw a rule at the location of the selection rules = alt.Chart(stockFRA).mark_rule(color=&#39;gray&#39;).encode( x=&#39;Date&#39;, ).transform_filter( nearest ) # Put the five layers into a chart and bind the data alt.layer( line, selectors, points, rules, text ).properties( width=600, height=300 ) . . #collapse-hide #importing stocks for Italy stockMIB = pd.read_csv(path+&#39;FTSE MIB.csv&#39;) utilities = pd.read_csv(path+&#39;FTSE Italia Utilities.csv&#39;) Telecommunications = pd.read_csv(path+&#39;FTSE Italia Telecommunications.csv&#39;) Technology = pd.read_csv(path+&#39;FTSE Italia Technology.csv&#39;) O_G = pd.read_csv(path+&#39;FTSE Italia Oil &amp; Gas.csv&#39;) Travel = pd.read_csv(path+&#39;FTSE Italia All Share Travel &amp; Leisure.csv&#39;) industrials = pd.read_csv(path+&#39;FTSE Italia All Share Industrials.csv&#39;) financials = pd.read_csv(path+&#39;FTSE Italia All Share Financials.csv&#39;) health = pd.read_csv(path+&#39;FTSE Italia All Share Health Care.csv&#39;) chemicals = pd.read_csv(path+&#39;FTSE Italia All Share Chemicals.csv&#39;) allsharesitalia = pd.read_csv(path+&#39;FTSE Italia All Share.csv&#39;) #prepare data for plotting stockMIB[&#39;Symbol&#39;]=&#39;MIB&#39; utilities[&#39;Symbol&#39;] = &#39;FTSE Utilities&#39; Telecommunications[&#39;Symbol&#39;] = &#39;FTSE Telecommunications&#39; Technology[&#39;Symbol&#39;] = &#39;FTSE Technology&#39; O_G[&#39;Symbol&#39;] = &#39;FTSE Oil &amp; Gas&#39; Travel[&#39;Symbol&#39;] = &#39;FTSE Travel &amp; Leisure&#39; industrials[&#39;Symbol&#39;] = &#39;FTSE Industrials&#39; financials[&#39;Symbol&#39;] = &#39;FTSE Financials&#39; health[&#39;Symbol&#39;] = &#39;FTSE Health Care&#39; chemicals[&#39;Symbol&#39;] = &#39;FTSE Chemicals&#39; allsharesitalia[&#39;Symbol&#39;] = &#39;Italy All Shares&#39; stockITA = pd.concat([stockMIB,utilities,Telecommunications,Technology,O_G,Travel, industrials,financials,health,chemicals,allsharesitalia],sort = True) stockITA[&#39;Date&#39;] = pd.to_datetime(stockITA.Date) stockITA = stockITA.sort_values(by=[&#39;Symbol&#39;,&#39;Date&#39;]) stockITA[&#39;Price&#39;] = stockITA[&#39;Price&#39;].str.replace(&#39;,&#39;,&#39;&#39;) stockITA[&#39;Price&#39;] = stockITA[&#39;Price&#39;].astype(float) . . # collapse-hide line = alt.Chart(stockITA).mark_line(interpolate=&#39;basis&#39;).encode( x=&#39;Date&#39;, y=&#39;Price&#39;, color=&#39;Symbol&#39;, ) nearest = alt.selection(type=&#39;single&#39;, nearest=True, on=&#39;mouseover&#39;, fields=[&#39;Date&#39;], empty=&#39;none&#39;) selectors = alt.Chart(stockITA, title=&#39;Major Index &amp; Primary Sectors Stocks Price(Italy)&#39;).mark_point().encode( x=&#39;Date&#39;, opacity=alt.value(0) ).add_selection( nearest ) # Draw points on the line, and highlight based on selection points = line.mark_point().encode( opacity=alt.condition(nearest, alt.value(1), alt.value(0)) ) # Draw text labels near the points, and highlight based on selection text = line.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=alt.condition(nearest, &#39;Price&#39;, alt.value(&#39; &#39;)) ) # Draw a rule at the location of the selection rules = alt.Chart(stockITA).mark_rule(color=&#39;gray&#39;).encode( x=&#39;Date&#39;, ).transform_filter( nearest ) # Put the five layers into a chart and bind the data alt.layer( line, selectors, points, rules, text ).properties( width=600, height=500 ) . . #collapse-hide #importing stocks for Spain ibex = pd.read_csv(path+&#39;IBEX 35 Historical Data.csv&#39;) materials= pd.read_csv(path+&#39;Madrid Basic Materials Industry and Construction Historical Data.csv&#39;) consumer = pd.read_csv(path+&#39;Madrid Consumer Goods Historical Data.csv&#39;) service = pd.read_csv(path+&#39;Madrid Consumer Services Historical Data.csv&#39;) financial = pd.read_csv(path+&#39;Madrid Financial Services &amp; Real Estate Historical Data.csv&#39;) petrol = pd.read_csv(path+&#39;Madrid Petrol and Power Historical Data.csv&#39;) technology = pd.read_csv(path+&#39;Madrid Technology and Telecommunications Historical Data.csv&#39;) spainall = pd.read_csv(path+&#39;IBEX MAB All Share Historical Data.csv&#39;) #prepare data for plotting ibex[&#39;Symbol&#39;]=&#39;IBEX 35&#39; materials[&#39;Symbol&#39;] = &#39;Basic Materials Industry and Construction&#39; consumer[&#39;Symbol&#39;] = &#39;Consumer Goods&#39; service[&#39;Symbol&#39;] = &#39;Services&#39; financial[&#39;Symbol&#39;] = &#39;Financial Services &amp; Real Estate&#39; petrol[&#39;Symbol&#39;] = &#39;Petrol and Power&#39; technology[&#39;Symbol&#39;] = &#39;Technology and Telecommunications&#39; spainall[&#39;Symbol&#39;] = &#39;Spain All Shares&#39; health[&#39;Symbol&#39;] = &#39;FTSE Health Care&#39; chemicals[&#39;Symbol&#39;] = &#39;FTSE Chemicals&#39; allsharesitalia[&#39;Symbol&#39;] = &#39;Italy All Shares&#39; stockSP = pd.concat([ibex,materials,consumer,service,financial,petrol,technology,spainall],sort = True) stockSP[&#39;Date&#39;] = pd.to_datetime(stockSP.Date) stockSP = stockSP.sort_values(by=[&#39;Symbol&#39;,&#39;Date&#39;]) stockSP[&#39;Price&#39;] = stockSP[&#39;Price&#39;].str.replace(&#39;,&#39;,&#39;&#39;) stockSP[&#39;Price&#39;] = stockSP[&#39;Price&#39;].astype(float) . . # collapse-hide line = alt.Chart(stockSP).mark_line(interpolate=&#39;basis&#39;).encode( x=&#39;Date&#39;, y=&#39;Price&#39;, color=&#39;Symbol&#39;, ) nearest = alt.selection(type=&#39;single&#39;, nearest=True, on=&#39;mouseover&#39;, fields=[&#39;Date&#39;], empty=&#39;none&#39;) selectors = alt.Chart(stockSP, title=&#39;Major Index &amp; Primary Sectors Stocks Price(Spain)&#39;).mark_point().encode( x=&#39;Date&#39;, opacity=alt.value(0) ).add_selection( nearest ) # Draw points on the line, and highlight based on selection points = line.mark_point().encode( opacity=alt.condition(nearest, alt.value(1), alt.value(0)) ) # Draw text labels near the points, and highlight based on selection text = line.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=alt.condition(nearest, &#39;Price&#39;, alt.value(&#39; &#39;)) ) # Draw a rule at the location of the selection rules = alt.Chart(stockSP).mark_rule(color=&#39;gray&#39;).encode( x=&#39;Date&#39;, ).transform_filter( nearest ) # Put the five layers into a chart and bind the data alt.layer( line, selectors, points, rules, text ).properties( width=600, height=300 ) . . #collapse-hide #importing stocks for the UK ftse100 = pd.read_csv(path+&#39;FTSE 100 Historical Data.csv&#39;) auto= pd.read_csv(path+&#39;FTSE 350 - Automobiles &amp; Parts Historical Data.csv&#39;) forestry = pd.read_csv(path+&#39;FTSE 350 - Forestry &amp; Paper Historical Data.csv&#39;) metals = pd.read_csv(path+&#39;FTSE 350 - Industrial Metals &amp; Mining Historical Data.csv&#39;) telecom = pd.read_csv(path+&#39;FTSE 350 - Mobile Telecommunications Historical Data.csv&#39;) realestate = pd.read_csv(path+&#39;FTSE 350 - Real Estate Historical Data.csv&#39;) aerospace = pd.read_csv(path+&#39;FTSE 350 Aerospace &amp; Defense Historical Data.csv&#39;) beverage = pd.read_csv(path+&#39;FTSE 350 Beverages Historical Data.csv&#39;) chemicalsuk = pd.read_csv(path+&#39;FTSE 350 Chemicals Historical Data.csv&#39;) construction = pd.read_csv(path+&#39;FTSE 350 Construction &amp; Building Materials Historical Data.csv&#39;) ukall = pd.read_csv(path+&#39;FTSE All-Share Historical Data.csv&#39;) #prepare data for plotting ftse100[&#39;Symbol&#39;]=&#39;FTSE 100&#39; auto[&#39;Symbol&#39;] = &#39;Automobiles &amp; Parts&#39; forestry[&#39;Symbol&#39;] = &#39;Forestry &amp; Paper&#39; metals[&#39;Symbol&#39;] = &#39;Industrial Metals &amp; Mining&#39; telecom[&#39;Symbol&#39;] = &#39;Mobile Telecommunications&#39; realestate[&#39;Symbol&#39;] = &#39;Real Estate&#39; aerospace[&#39;Symbol&#39;] = &#39;Aerospace &amp; Defense&#39; beverage[&#39;Symbol&#39;] = &#39;Beverages&#39; ukall[&#39;Symbol&#39;] = &#39;United Kingdom All Shares&#39; chemicalsuk[&#39;Symbol&#39;] = &#39;Chemicals&#39; construction[&#39;Symbol&#39;] = &#39;Construction &amp; Building Materials&#39; stockUK = pd.concat([ftse100,auto,forestry,metals,telecom,realestate,aerospace,beverage,chemicalsuk,construction,ukall],sort = True) stockUK[&#39;Date&#39;] = pd.to_datetime(stockUK.Date) stockUK = stockUK.sort_values(by=[&#39;Symbol&#39;,&#39;Date&#39;]) stockUK[&#39;Price&#39;] = stockUK[&#39;Price&#39;].str.replace(&#39;,&#39;,&#39;&#39;) stockUK[&#39;Price&#39;] = stockUK[&#39;Price&#39;].astype(float) . . # collapse-hide line = alt.Chart(stockUK).mark_line(interpolate=&#39;basis&#39;).encode( x=&#39;Date&#39;, y=&#39;Price&#39;, color=&#39;Symbol&#39;, ) nearest = alt.selection(type=&#39;single&#39;, nearest=True, on=&#39;mouseover&#39;, fields=[&#39;Date&#39;], empty=&#39;none&#39;) selectors = alt.Chart(stockUK, title=&#39;Major Index &amp; Primary Sectors Stocks Price (UK)&#39;).mark_point().encode( x=&#39;Date&#39;, opacity=alt.value(0) ).add_selection( nearest ) # Draw points on the line, and highlight based on selection points = line.mark_point().encode( opacity=alt.condition(nearest, alt.value(1), alt.value(0)) ) # Draw text labels near the points, and highlight based on selection text = line.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=alt.condition(nearest, &#39;Price&#39;, alt.value(&#39; &#39;)) ) # Draw a rule at the location of the selection rules = alt.Chart(stockUK).mark_rule(color=&#39;gray&#39;).encode( x=&#39;Date&#39;, ).transform_filter( nearest ) # Put the five layers into a chart and bind the data alt.layer( line, selectors, points, rules, text ).properties( width=600, height=500 ) . . #collapse-hide #importing stocks for the USA dow30 = pd.read_csv(path+&#39;Dow Jones Industrial Average Historical Data.csv&#39;) consumerus= pd.read_csv(path+&#39;Dow Jones Consumer Goods Historical Data.csv&#39;) servicesus = pd.read_csv(path+&#39;Dow Jones Consumer Services Historical Data.csv&#39;) financialsus = pd.read_csv(path+&#39;Dow Jones Financials Historical Data.csv&#39;) healthus = pd.read_csv(path+&#39;Dow Jones Health Care Historical Data.csv&#39;) industrialsus = pd.read_csv(path+&#39;Dow Jones Industrials Historical Data.csv&#39;) ogus = pd.read_csv(path+&#39;Dow Jones Oil &amp; Gas Historical Data.csv&#39;) materialsus = pd.read_csv(path+&#39;Dow Jones Basic Materials Historical Data.csv&#39;) technologyus = pd.read_csv(path+&#39;Dow Jones Technology Historical Data.csv&#39;) telecomus = pd.read_csv(path+&#39;Dow Jones Telecommunications Historical Data.csv&#39;) utilitiesus = pd.read_csv(path+&#39;Dow Jones Utilities Historical Data.csv&#39;) #prepare data for plotting dow30[&#39;Symbol&#39;]=&#39;Dow 30&#39; consumerus[&#39;Symbol&#39;] = &#39;Consumer Goods&#39; servicesus[&#39;Symbol&#39;] = &#39;Consumer Services&#39; financialsus[&#39;Symbol&#39;] = &#39;Financials&#39; healthus[&#39;Symbol&#39;] = &#39;Health Care&#39; industrialsus[&#39;Symbol&#39;] = &#39;Industrials&#39; ogus[&#39;Symbol&#39;] = &#39;Oil &amp; Gas&#39; materialsus[&#39;Symbol&#39;] = &#39;Materials&#39; technologyus[&#39;Symbol&#39;] = &#39;Technology&#39; telecomus[&#39;Symbol&#39;] = &#39;Telecommunications&#39; utilitiesus[&#39;Symbol&#39;] = &#39;Utilities&#39; stockUS = pd.concat([dow30,consumerus,servicesus,financialsus,healthus,industrialsus,ogus,materialsus,technologyus, telecomus,utilitiesus],sort = True) stockUS[&#39;Date&#39;] = pd.to_datetime(stockUS.Date) stockUS = stockUS.sort_values(by=[&#39;Symbol&#39;,&#39;Date&#39;]) stockUS[&#39;Price&#39;] = stockUS[&#39;Price&#39;].str.replace(&#39;,&#39;,&#39;&#39;) stockUS[&#39;Price&#39;] = stockUS[&#39;Price&#39;].astype(float) . . # collapse-hide line = alt.Chart(stockUS).mark_line(interpolate=&#39;basis&#39;).encode( x=&#39;Date&#39;, y=&#39;Price&#39;, color=&#39;Symbol&#39;, ) nearest = alt.selection(type=&#39;single&#39;, nearest=True, on=&#39;mouseover&#39;, fields=[&#39;Date&#39;], empty=&#39;none&#39;) selectors = alt.Chart(stockUS, title=&#39;Major Index &amp; Primary Sectors Stocks Price (USA)&#39;).mark_point().encode( x=&#39;Date&#39;, opacity=alt.value(0) ).add_selection( nearest ) # Draw points on the line, and highlight based on selection points = line.mark_point().encode( opacity=alt.condition(nearest, alt.value(1), alt.value(0)) ) # Draw text labels near the points, and highlight based on selection text = line.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=alt.condition(nearest, &#39;Price&#39;, alt.value(&#39; &#39;)) ) # Draw a rule at the location of the selection rules = alt.Chart(stockUS).mark_rule(color=&#39;gray&#39;).encode( x=&#39;Date&#39;, ).transform_filter( nearest ) # Put the five layers into a chart and bind the data alt.layer( line, selectors, points, rules, text ).properties( width=600, height=300) . . #collapse-hide #importing stocks for the USA shanghai = pd.read_csv(path+&#39;Shanghai Composite Historical Data.csv&#39;) szse= pd.read_csv(path+&#39;SZSE Component Historical Data.csv&#39;) oilch = pd.read_csv(path+&#39;FTSE China - Oil Equipment Services &amp; Distribution Historical Data.csv&#39;) banksch = pd.read_csv(path+&#39;FTSE China A 600 - Banks Historical Data.csv&#39;) electricitych = pd.read_csv(path+&#39;FTSE China A 600 - Electricity Historical Data.csv&#39;) financialsch = pd.read_csv(path+&#39;FTSE China A 600 - Financials Historical Data.csv&#39;) gwch = pd.read_csv(path+&#39;FTSE China A 600 - Gas &amp; Water Multiutilities Historical Data.csv&#39;) retailersch = pd.read_csv(path+&#39;FTSE China A 600 - General Retailers Historical Data.csv&#39;) lifeinsurancech = pd.read_csv(path+&#39;FTSE China A 600 - Life Insurance Historical Data.csv&#39;) mediach = pd.read_csv(path+&#39;FTSE China A 600 - Media Historical Data.csv&#39;) realestatech = pd.read_csv(path+&#39;FTSE China A 600 - Real Estate Investment &amp; Services Historical Data.csv&#39;) scch = pd.read_csv(path+&#39;FTSE China A 600 - Software &amp; Computer Services Historical Data.csv&#39;) #prepare data for plotting shanghai[&#39;Symbol&#39;]=&#39;Shanghai Composite&#39; szse[&#39;Symbol&#39;] = &#39;SZSE Component&#39; oilch[&#39;Symbol&#39;] = &#39;Oil Equipment Services &amp; Distribution&#39; banksch[&#39;Symbol&#39;] = &#39;Banks&#39; electricitych[&#39;Symbol&#39;] = &#39;Electricity&#39; financialsch[&#39;Symbol&#39;] = &#39;Financials&#39; gwch[&#39;Symbol&#39;] = &#39;Gas &amp; Water&#39; retailersch[&#39;Symbol&#39;] = &#39;General Retailers&#39; lifeinsurancech[&#39;Symbol&#39;] = &#39;Life Insurance&#39; mediach[&#39;Symbol&#39;] = &#39;Media&#39; realestatech[&#39;Symbol&#39;] = &#39;Real Estate Investment &amp; Services&#39; scch[&#39;Symbol&#39;] = &#39;Software &amp; Computer Services&#39; stockCH = pd.concat([shanghai,szse,oilch,banksch,electricitych,financialsch,gwch,retailersch,lifeinsurancech, mediach,realestatech,scch],sort = True) stockCH[&#39;Date&#39;] = pd.to_datetime(stockCH.Date) stockCH = stockCH.sort_values(by=[&#39;Symbol&#39;,&#39;Date&#39;]) stockCH[&#39;Price&#39;] = stockCH[&#39;Price&#39;].str.replace(&#39;,&#39;,&#39;&#39;) stockCH[&#39;Price&#39;] = stockCH[&#39;Price&#39;].astype(float) . . # collapse-hide line = alt.Chart(stockCH).mark_line(interpolate=&#39;basis&#39;).encode( x=&#39;Date&#39;, y=&#39;Price&#39;, color=&#39;Symbol&#39;, ) nearest = alt.selection(type=&#39;single&#39;, nearest=True, on=&#39;mouseover&#39;, fields=[&#39;Date&#39;], empty=&#39;none&#39;) selectors = alt.Chart(stockCH, title=&#39;Major Index &amp; Primary Sectors Stocks Price (China)&#39;).mark_point().encode( x=&#39;Date&#39;, opacity=alt.value(0) ).add_selection( nearest ) # Draw points on the line, and highlight based on selection points = line.mark_point().encode( opacity=alt.condition(nearest, alt.value(1), alt.value(0)) ) # Draw text labels near the points, and highlight based on selection text = line.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=alt.condition(nearest, &#39;Price&#39;, alt.value(&#39; &#39;)) ) # Draw a rule at the location of the selection rules = alt.Chart(stockCH).mark_rule(color=&#39;gray&#39;).encode( x=&#39;Date&#39;, ).transform_filter( nearest ) # Put the five layers into a chart and bind the data alt.layer( line, selectors, points, rules, text ).properties( width=600, height=500) . . GDP Inflation &amp; unemployment data . Major countrys&#39; GDP Inflation and unemployment annual change rate data from IMF includes forecast of 2020 and 2021 . I have removed Germany because we are not icluding it in the analysis above and now we need data if possible for the UK . # collapse-hide # data preprocessing def extract_data(df, subject): dates = [&#39;2014&#39;, &#39;2015&#39;, &#39;2016&#39;, &#39;2017&#39;, &#39;2018&#39;, &#39;2019&#39;, &#39;2020&#39;, &#39;2021&#39;] d = {&#39;Date&#39;: dates, &#39;Value&#39;: [df[date] for date in dates]} values = [] countries = [] _dates = [] for country in df.Country.unique(): tmp = df.loc[df.Country == country] for date in dates: countries.append(country) _dates.append(date) values.append(float(tmp[date])) rv = pd.DataFrame.from_dict({&#39;Date&#39;: _dates, &#39;Country&#39;: countries, &#39;Value&#39;: values}) rv[&#39;subject&#39;] = subject return rv unemploy = majorCountry.loc[majorCountry[&#39;Subject Descriptor&#39;] == &#39;Unemployment rate&#39;] unemploy = extract_data(unemploy[unemploy.Country != &#39;Germany&#39;], &#39;unemployment&#39;) inflation = majorCountry.loc[majorCountry[&#39;Subject Descriptor&#39;] == &#39;Inflation, average consumer prices&#39;] inflation = extract_data(inflation[inflation.Country != &#39;Germany&#39;], &#39;inflation&#39;) gdp = majorCountry.loc[majorCountry[&#39;Subject Descriptor&#39;] == &#39;Gross domestic product, constant prices&#39;] gdp = extract_data(gdp[gdp.Country != &#39;Germany&#39;], &#39;gdp&#39;) # A dropdown filter countries = list(majorCountry.Country.unique()) country_dropdown = alt.binding_select(options=countries) country_select = alt.selection_single(fields=[&#39;Country&#39;], bind=country_dropdown, name=&quot;Select&quot;) filter_gdp = alt.Chart(gdp, width=300, height=300, title=&#39;GDP Growth of Major Countries&#39;).mark_line(point=True).encode( alt.X(&#39;Date:T&#39;), alt.Y(&#39;Value:Q&#39;, title= &#39;Growth Rate %&#39;), color=&#39;Country&#39;, tooltip = [alt.Tooltip(&#39;Value:Q&#39;)] ).add_selection(country_select).transform_filter(country_select) # umemployment plot filter_unemployment = alt.Chart(unemploy, width=300, height=300, title=&#39;Unemployment Change of Major Countries&#39;).mark_line(point=True).encode( alt.X(&#39;Date:T&#39;), alt.Y(&#39;Value:Q&#39;, title= &#39;Growth Rate %&#39;), color=&#39;Country&#39;, tooltip = [alt.Tooltip(&#39;Value:Q&#39;)] ).add_selection(country_select).transform_filter(country_select) # inflation plot filter_inflation = alt.Chart(inflation, width=300, height=300, title=&#39;Inflation Change of Major Countries&#39;).mark_line(point=True).encode( alt.X(&#39;Date:T&#39;), alt.Y(&#39;Value:Q&#39;, title= &#39;Growth Rate %&#39;), color=&#39;Country&#39;, tooltip = [alt.Tooltip(&#39;Value:Q&#39;)] ).add_selection(country_select).transform_filter(country_select) (filter_gdp | filter_unemployment | filter_inflation) . . data source . https://ilostat.ilo.org . https://www.investing.com . https://www.imf.org . http://www.oecd.org . https://github.com/datasets/covid-19 . References . Investopedia |",
            "url": "https://narcissist1.github.io/02806-final-project/data_analysis/visualization/2020/04/13/final-project.html",
            "relUrl": "/data_analysis/visualization/2020/04/13/final-project.html",
            "date": " • Apr 13, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://narcissist1.github.io/02806-final-project/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://narcissist1.github.io/02806-final-project/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://narcissist1.github.io/02806-final-project/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://narcissist1.github.io/02806-final-project/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}
{
  
    
        "post0": {
            "title": "Title",
            "content": "02806 Final project-Test . toc: true | badges: true | author: Georgios Zefkilis &amp; Yucheng Ren | comments: false | categories: [data_analysis, visualization] | . #collapse-hide # cov19 preprocess cov19 = cov19[[&#39;Date&#39;, &#39;Country&#39;, &#39;Confirmed&#39;, &#39;Deaths&#39;, &#39;Recovered&#39;]] cov19[&#39;Country&#39;] = cov19[&#39;Country&#39;].replace(&#39;Mainland China&#39;, &#39;China&#39;) cov19.columns = [&#39;Date&#39;, &#39;Country&#39;, &#39;Cases&#39;, &#39;Deaths&#39;, &#39;Recovered&#39;] cov19 = cov19.groupby([&#39;Date&#39;, &#39;Country&#39;])[[&#39;Cases&#39;, &#39;Deaths&#39;, &#39;Recovered&#39;]] cov19 = cov19.sum().reset_index() # ebola preprocess ebola = ebola[[&#39;Date&#39;, &#39;Country&#39;, &#39;No. of confirmed, probable and suspected cases&#39;, &#39;No. of confirmed, probable and suspected deaths&#39;]] ebola.columns = [&#39;Date&#39;, &#39;Country&#39;, &#39;Cases&#39;, &#39;Deaths&#39;] ebola = ebola.groupby([&#39;Date&#39;, &#39;Country&#39;])[[&#39;Cases&#39;, &#39;Deaths&#39;]] ebola = ebola.sum().reset_index() ebola[&#39;Cases&#39;] = ebola[&#39;Cases&#39;].fillna(0) ebola[&#39;Deaths&#39;] = ebola[&#39;Deaths&#39;].fillna(0) ebola[&#39;Cases&#39;] = ebola[&#39;Cases&#39;].astype(&#39;int&#39;) ebola[&#39;Deaths&#39;] = ebola[&#39;Deaths&#39;].astype(&#39;int&#39;) # h1n1 preprocess h1n1 = h1n1[[&#39;Update Time&#39;, &#39;Country&#39;, &#39;Cases&#39;, &#39;Deaths&#39;]] h1n1.columns = [&#39;Date&#39;, &#39;Country&#39;, &#39;Cases&#39;, &#39;Deaths&#39;] h1n1 = h1n1.groupby([&#39;Date&#39;, &#39;Country&#39;])[[&#39;Cases&#39;, &#39;Deaths&#39;]] h1n1 = h1n1.sum().reset_index() # sars preprocess sars = sars[[&#39;Date&#39;, &#39;Country&#39;, &#39;Cumulative number of case(s)&#39;, &#39;Number of deaths&#39;, &#39;Number recovered&#39;]] sars.columns = [&#39;Date&#39;, &#39;Country&#39;, &#39;Cases&#39;, &#39;Deaths&#39;, &#39;Recovered&#39;] sars = sars.groupby([&#39;Date&#39;, &#39;Country&#39;])[[&#39;Cases&#39;, &#39;Deaths&#39;, &#39;Recovered&#39;]] sars = sars.sum().reset_index() . . Basic Data Analysis&#182; . # collapse-hide def averagePerDay(disease, attr=&#39;Cases&#39;): allCases = disease[attr].max() days = len(disease.Date.unique()) return allCases * 1.0 / days def getTimeSpan(disease): return (disease.Date.min(), disease.Date.max(), len(disease.Date.unique())) print(&quot;Time span for our data:&quot;) for key, value in dataset.items(): start, end, span = getTimeSpan(value) print(key, &#39;starts from &#39;, start, &#39; ends at &#39;, end, &#39; duration &#39;, span, &#39;days&#39;) print() print(&quot;Average confirmed cases per day for each disease&quot;) for key, value in dataset.items(): cases = averagePerDay(value) print(key, &#39;average confirmed&#39;, cases) print() print(&quot;Average death cases per day for each disease&quot;) for key, value in dataset.items(): cases = averagePerDay(value, &#39;Deaths&#39;) print(key, &#39;average death&#39;, cases) . . Comparison with Other Infectious Virus .",
            "url": "https://narcissist1.github.io/02806-final-project/2020/04/20/test2-project.html",
            "relUrl": "/2020/04/20/test2-project.html",
            "date": " • Apr 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "02806 Final project",
            "content": ". Tip: This page is generated from a Jupyter notebook, some of the code are hid under the hood, some of them can be shown by clicking the button Show Code. If you want to visit the complete notebook, please click the view on github button above. . Introduction . The COVID-19 virus put us in a severe situation and changed our lives in many ways. The huge impact we feel first is in the economy. Many people start working remotely and others even lost their jobs. Governments around the world are preparing economic stimulus plans and so on. In this project, we decide to do some statistics and data visualization about how this virus has an impact on our economy. . The first part is a general analysis and visualization of the current situation of the COVID-19, like the confirmed cases and death cases distribution, growing trend and so on. The second part is about how the virus affect our economy state which includes macroeconomic and microeconomic. . Macroeconomic . Stock Market . Talk about the stock market . # collapse-hide line = alt.Chart(stockAll).mark_line(interpolate=&#39;basis&#39;).encode( x=&#39;Date&#39;, y=&#39;Price&#39;, color=&#39;Symbol&#39;, ) nearest = alt.selection(type=&#39;single&#39;, nearest=True, on=&#39;mouseover&#39;, fields=[&#39;Date&#39;], empty=&#39;none&#39;) selectors = alt.Chart(stockAll).mark_point().encode( x=&#39;Date&#39;, opacity=alt.value(0), ).add_selection( nearest ) # Draw points on the line, and highlight based on selection points = line.mark_point().encode( opacity=alt.condition(nearest, alt.value(1), alt.value(0)) ) # Draw text labels near the points, and highlight based on selection text = line.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=alt.condition(nearest, &#39;Price&#39;, alt.value(&#39; &#39;)) ) # Draw a rule at the location of the selection rules = alt.Chart(stockAll).mark_rule(color=&#39;gray&#39;).encode( x=&#39;Date&#39;, ).transform_filter( nearest ) # Put the five layers into a chart and bind the data alt.layer( line, selectors, points, rules, text ).properties( width=600, height=300 ) . . unemployRate.head() . Unemployment rate (Percent) 1980 1981 1982 1983 1984 1985 1986 1987 1988 ... 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 . 0 Albania | 5 | 4.2 | 2.8 | 3.3 | 4.4 | 5.9 | 5.4 | 5.2 | 6 | ... | 13.4 | 15.9 | 17.5 | 17.1 | 15.2 | 13.7 | 12.3 | 12 | 11.8 | 11.5 | . 1 Algeria | 15.8 | 15.4 | 15 | 14.3 | 16.5 | 16.9 | 18.4 | 20.1 | 21.8 | ... | 11 | 9.8 | 10.6 | 11.2 | 10.5 | 11.7 | 11.7 | 11.4 | 15.1 | 13.9 | . 2 Argentina | 3 | 5 | 4.5 | 5 | 5 | 6.2 | 6.3 | 6 | 6.5 | ... | 7.2 | 7.1 | 7.3 | 6.5 | 8.5 | 8.4 | 9.2 | 9.8 | 10.9 | 10.1 | . 3 Armenia | no data | no data | no data | no data | no data | no data | no data | no data | no data | ... | 17.3 | 16.2 | 17.6 | 18.5 | 18 | 17.8 | 20.4 | 17.7 | 19 | 18.4 | . 4 Aruba | no data | no data | no data | no data | no data | no data | no data | no data | no data | ... | 9.6 | 7.6 | 7.5 | 7.3 | 7.7 | 8.9 | 7.3 | 7.5 | 7.5 | 7.5 | . 5 rows × 43 columns . url_geojson = &#39;https://github.com/vega/vega-datasets/blob/master/data/world-110m.json&#39; data_geojson_remote = alt.Data(url=url_geojson, format=alt.DataFormat(property=&#39;features&#39;,type=&#39;json&#39;)) # chart object alt.Chart(data_geojson_remote).mark_geoshape( ).encode( color=&quot;properties.name:N&quot; ).properties( projection={&#39;type&#39;: &#39;identity&#39;, &#39;reflectY&#39;: True} ) . from vega_datasets import data counties = alt.topo_feature(&#39;https://github.com/vega/vega-datasets/blob/master/data/world-110m.json&#39;, &#39;counties&#39;) source = data.unemployment.url alt.Chart(counties).mark_geoshape().encode( color=&#39;rate:Q&#39; ).transform_lookup( lookup=&#39;id&#39;, from_=alt.LookupData(source, &#39;id&#39;, [&#39;rate&#39;]) ).project( type=&#39;albersUsa&#39; ).properties( width=500, height=300 ) . counties = alt.topo_feature(data.us_10m.url, &#39;counties&#39;) counties . UrlData({ format: TopoDataFormat({ feature: &#39;counties&#39;, type: &#39;topojson&#39; }), url: &#39;https://vega.github.io/vega-datasets/data/us-10m.json&#39; }) . Denmark&#39;s GDP . Denmark 40 years GDP annual growth rate data from IMF includes forecast of 2020 and 2021 . # collapse-hide gdp = imfGDP.loc[0][1:] years = [] values = [] for index, value in gdp.items(): years.append(index) values.append(value) gdpDF = pd.DataFrame(list(zip(years, values)), columns =[&#39;Year&#39;, &#39;Value&#39;]) alt.Chart(gdpDF).mark_line(point=True).encode( alt.X(&#39;Year:O&#39;), alt.Y(&#39;Value:Q&#39;, title= &#39;Growth Rate&#39;), ) . . Microeconomic . Employment and unemployment data . denEmploy . Country indicator source sex classif1 time obs_value obs_status note_indicator . 0 Denmark | Employment by sex and age (thousands) | DNK - LFS - EU Labour Force Survey | Sex: Total | Age (5-year bands): Total | 2016Q1 | 2720.0 | Break in series | Frequency: Quarterly | Break in series: Method... | . 1 Denmark | Employment by sex and age (thousands) | DNK - LFS - EU Labour Force Survey | Sex: Total | Age (5-year bands): 15-19 | 2016Q1 | 130.6 | Break in series | Frequency: Quarterly | Break in series: Method... | . 2 Denmark | Employment by sex and age (thousands) | DNK - LFS - EU Labour Force Survey | Sex: Total | Age (5-year bands): 20-24 | 2016Q1 | 236.2 | Break in series | Frequency: Quarterly | Break in series: Method... | . 3 Denmark | Employment by sex and age (thousands) | DNK - LFS - EU Labour Force Survey | Sex: Total | Age (5-year bands): 25-29 | 2016Q1 | 264.7 | Break in series | Frequency: Quarterly | Break in series: Method... | . 4 Denmark | Employment by sex and age (thousands) | DNK - LFS - EU Labour Force Survey | Sex: Total | Age (5-year bands): 30-34 | 2016Q1 | 253.2 | Break in series | Frequency: Quarterly | Break in series: Method... | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | . 1339 Denmark | Employment by sex and age (thousands) | DNK - LFS - EU Labour Force Survey | Sex: Male | Age (Youth, adults): 25+ | 2019Q4 | 1337.1 | NaN | Frequency: Quarterly | . 1340 Denmark | Employment by sex and age (thousands) | DNK - LFS - EU Labour Force Survey | Sex: Female | Age (Youth, adults): 15+ | 2019Q4 | 1355.3 | NaN | Frequency: Quarterly | . 1341 Denmark | Employment by sex and age (thousands) | DNK - LFS - EU Labour Force Survey | Sex: Female | Age (Youth, adults): 15-64 | 2019Q4 | 1328.4 | NaN | Frequency: Quarterly | . 1342 Denmark | Employment by sex and age (thousands) | DNK - LFS - EU Labour Force Survey | Sex: Female | Age (Youth, adults): 15-24 | 2019Q4 | 198.2 | NaN | Frequency: Quarterly | . 1343 Denmark | Employment by sex and age (thousands) | DNK - LFS - EU Labour Force Survey | Sex: Female | Age (Youth, adults): 25+ | 2019Q4 | 1157.1 | NaN | Frequency: Quarterly | . 1344 rows × 9 columns . # collapse-hide plotData = denEmploy.loc[(denEmploy.sex != &#39;Sex: Total&#39;) &amp; (denEmploy[&#39;time&#39;] &gt; &#39;2018M01&#39;)] alt.Chart(plotData).mark_bar().encode( x=&#39;sex:O&#39;, y= alt.Y(&#39;obs_value:Q&#39;, title = &#39;Employmnet Count (thousands)&#39;), color=&#39;sex:N&#39;, column=alt.Column(&#39;time:N&#39;, title=&#39;Quarterly&#39;) ) . . # collapse-hide plotData = denUnemployMonthly.loc[(denUnemployMonthly.sex != &#39;Sex: Total&#39;) &amp; (denUnemployMonthly[&#39;time&#39;] &gt; &#39;2019M01&#39;)] alt.Chart(plotData).mark_bar().encode( x=&#39;sex:O&#39;, y= alt.Y(&#39;obs_value:Q&#39;, title=&#39;Unemplyment Count (thousands)&#39;), color=&#39;sex:N&#39;, column= alt.Column(&#39;time:N&#39;, title=&#39;Monthly&#39;) ) . . data source . https://ilostat.ilo.org . https://www.investing.com . https://www.imf.org . http://www.oecd.org .",
            "url": "https://narcissist1.github.io/02806-final-project/data_analysis/visualization/2020/04/13/final-project.html",
            "relUrl": "/data_analysis/visualization/2020/04/13/final-project.html",
            "date": " • Apr 13, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://narcissist1.github.io/02806-final-project/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://narcissist1.github.io/02806-final-project/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://narcissist1.github.io/02806-final-project/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://narcissist1.github.io/02806-final-project/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}